
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ### Test battery for various optimization parameters for different optimizers.
> ### 
> library(maxLik)
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> options(digits = 4)
>                            # just to avoid so many differences when comparing these output files
> ## data to fit a normal distribution
> set.seed( 123 )
> # generate a variable from normally distributed random numbers
> N <- 50
> x <- rnorm(N, 1, 2 )
> 
> ## log likelihood function
> llf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    if(!(sigma > 0))
+        return(NA)
+                            # to avoid warnings in the output
+    N <- length( x )
+    llValue <- -0.5 * N * log( 2 * pi ) - N * log( sigma ) -
+       0.5 * sum( ( x - mu )^2 / sigma^2 )
+    return( llValue )
+ }
> 
> # start values
> startVal <- c( mu = 0, sigma = 1 )
> 
> # 
> ml <- maxLik( llf, start = startVal )
> print(summary(ml))
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -101.2 
2  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)    
mu       1.069      0.259    4.12 3.7e-05 ***
sigma    1.833      0.183   10.00 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> ## tol
> mlTol <- maxLik( llf, start = startVal, tol=1)
> print(summary(mlTol))
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 4 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -101.3 
2  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)    
mu       1.060      0.253    4.18 2.9e-05 ***
sigma    1.791      0.173   10.35 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> mlTolC <- maxLik(llf, start=startVal, control=list(tol=1))
> print(all.equal(mlTol, mlTolC))
[1] TRUE
> try(ml <- maxLik( llf, start = startVal, tol=-1))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'tol' must be non-negative, not -1
> try(ml <- maxLik( llf, start = startVal, tol=c(1,2)))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'tol' must be of length 1, not 2
In addition: Warning message:
In if (slot(object, "tol") < 0) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, tol=TRUE))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'tol' in an object of class "MaxControl"; is(value, "numeric") is not TRUE
> try(ml <- maxLik( llf, start = startVal, control=list(tol=-1)))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'tol' must be non-negative, not -1
> try(ml <- maxLik( llf, start = startVal, control=list(tol=c(1,2))))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'tol' must be of length 1, not 2
In addition: Warning message:
In if (slot(object, "tol") < 0) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, control=list(tol=TRUE)))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'tol' in an object of class "MaxControl"; is(value, "numeric") is not TRUE
> ## reltol
> mlRelTol <- maxLik( llf, start = startVal, reltol=1)
> print(summary(mlRelTol))
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 1 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -118.3 
2  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)    
mu       0.741      0.167    4.43 9.2e-06 ***
sigma    1.153      0.064   18.02 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> mlRelTolC <- maxLik(llf, start=startVal, control=list(reltol=1))
> print(all.equal(mlRelTol, mlRelTolC))
[1] TRUE
> try(ml <- maxLik( llf, start = startVal, reltol=-1))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'reltol' must be non-negative, not -1
> try(ml <- maxLik( llf, start = startVal, reltol=c(1,2)))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'reltol' must be of length 1, not 2
In addition: Warning message:
In if (slot(object, "reltol") < 0) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, reltol=TRUE))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'reltol' in an object of class "MaxControl"; is(value, "numeric") is not TRUE
> try(ml <- maxLik( llf, start = startVal, control=list(reltol=-1)))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'reltol' must be non-negative, not -1
> try(ml <- maxLik( llf, start = startVal, control=list(reltol=c(1,2))))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'reltol' must be of length 1, not 2
In addition: Warning message:
In if (slot(object, "reltol") < 0) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, control=list(reltol=TRUE)))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'reltol' in an object of class "MaxControl"; is(value, "numeric") is not TRUE
> ## gradtol
> mlGradtol <- maxLik( llf, start = startVal, gradtol=1e-2)
> print(summary(mlGradtol))
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 6 iterations
Return code 1: gradient close to zero
Log-Likelihood: -101.2 
2  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)    
mu       1.069      0.259    4.12 3.7e-05 ***
sigma    1.833      0.183   10.00 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> mlGradtolC <- maxLik(llf, start=startVal, control=list(gradtol=1e-2))
> print(all.equal(mlGradtol, mlGradtolC))
[1] TRUE
> try(ml <- maxLik( llf, start = startVal, gradtol=-1))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'gradtol' must be non-negative, not -1
> try(ml <- maxLik( llf, start = startVal, gradtol=c(1,2)))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'gradtol' must be of length 1, not 2
In addition: Warning message:
In if (slot(object, "gradtol") < 0) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, gradtol=TRUE))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'gradtol' in an object of class "MaxControl"; is(value, "numeric") is not TRUE
> try(ml <- maxLik( llf, start = startVal, control=list(gradtol=-1)))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'gradtol' must be non-negative, not -1
> try(ml <- maxLik( llf, start = startVal, control=list(gradtol=c(1,2))))
Error in validObject(x) : 
  invalid class "MaxControl" object: 'gradtol' must be of length 1, not 2
In addition: Warning message:
In if (slot(object, "gradtol") < 0) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, control=list(gradtol=TRUE)))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'gradtol' in an object of class "MaxControl"; is(value, "numeric") is not TRUE
> ## examples with steptol, lambdatol
> ## qac
> mlMarq <- maxLik( llf, start = startVal, qac="marquardt")
> print(summary(mlMarq))
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation with Marquardt (1963) Hessian correction, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -101.2 
2  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)    
mu       1.069      0.259    4.12 3.7e-05 ***
sigma    1.833      0.183   10.00 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> mlMarqC <- maxLik(llf, start=startVal, control=list(qac="marquardt"))
> print(all.equal(mlMarq, mlMarqC))
[1] TRUE
> try(ml <- maxLik( llf, start = startVal, qac=-1))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "numeric" is not valid for slot 'qac' in an object of class "MaxControl"; is(value, "character") is not TRUE
> try(ml <- maxLik( llf, start = startVal, qac=c("a", "b")))
Error in if (!pmatch(slot(object, "qac"), c("stephalving", "marquardt"))) { : 
  missing value where TRUE/FALSE needed
In addition: Warning message:
In if (!pmatch(slot(object, "qac"), c("stephalving", "marquardt"))) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, qac=TRUE))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'qac' in an object of class "MaxControl"; is(value, "character") is not TRUE
> try(ml <- maxLik( llf, start = startVal, control=list(qac=-1)))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "numeric" is not valid for slot 'qac' in an object of class "MaxControl"; is(value, "character") is not TRUE
> try(ml <- maxLik( llf, start = startVal, control=list(qac=c("a", "b"))))
Error in if (!pmatch(slot(object, "qac"), c("stephalving", "marquardt"))) { : 
  missing value where TRUE/FALSE needed
In addition: Warning message:
In if (!pmatch(slot(object, "qac"), c("stephalving", "marquardt"))) { :
  the condition has length > 1 and only the first element will be used
> try(ml <- maxLik( llf, start = startVal, control=list(qac=TRUE)))
Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class "logical" is not valid for slot 'qac' in an object of class "MaxControl"; is(value, "character") is not TRUE
> mlMarqCl <- a <- maxLik(llf, start = startVal,
+                         control=list(qac="marquardt", lambda0=1000, lambdaStep=4))
> print(all.equal(coef(mlMarqCl), coef(mlMarq)))
[1] TRUE
> ## NM: alpha, beta, gamma
> mlNM <- maxLik( llf, start = startVal, method="nm")
> print(summary(mlNM))
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximization, 61 iterations
Return code 0: successful convergence 
Log-Likelihood: -101.2 
2  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)    
mu       1.069      0.259    4.12 3.8e-05 ***
sigma    1.833      0.183   10.00 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> mlNMAlpha <- maxLik(llf, start=startVal, method="nm", beta=0.8)
> mlNMAlphaC <- maxLik(llf, start=startVal, method="nm", control=list(beta=0.8))
> print(all.equal(mlNMAlpha, mlNMAlphaC))
[1] TRUE
> 
> ## likelihood function with additional parameter
> llf1 <- function( param, sigma ) {
+    mu <- param
+    N <- length( x )
+    llValue <- -0.5 * N * log( 2 * pi ) - N * log( sigma ) -
+        0.5 * sum( ( x - mu )^2 / sigma^2 )
+    return( llValue )
+        }
> 
> ## log-lik mixture
> logLikMix <- function(param) {
+    rho <- param[1]
+    if(rho < 0 || rho > 1)
+        return(NA)
+    mu1 <- param[2]
+    mu2 <- param[3]
+    ll <- log(rho*dnorm(x - mu1) + (1 - rho)*dnorm(x - mu2))
+    ll
+ }
> 
> ## loglik mixture with additional parameter
> logLikMixA <- function(param, rho) {
+    mu1 <- param[1]
+    mu2 <- param[2]
+    ll <- log(rho*dnorm(x - mu1) + (1 - rho)*dnorm(x - mu2))
+    ll
+ }
> 
> ## Test the following with all the main optimizers:
> for(method in c("NR", "BFGS", "BFGSR")) {
+    ## two parameters at the same time
+    ## iterlim, printLevel
+    cat("-- method", method, "--\n")
+    N <- 100
+    x <- rnorm(N, 1, 2 )
+    startVal <- c(1,2)
+    ml2 <- maxLik( llf, start=startVal, method=method, iterlim=1, printLevel=2)
+    print(summary(ml2))
+    ml2C <- maxLik(llf, start=startVal, method=method,
+                   control=list(iterlim=1, printLevel=2))
+    print(all.equal(ml2, ml2C))
+    ## what about additional parameters for the loglik function?
+    mls <- maxLik(llf1, start=0, method=method, sigma=1)
+    print(coef(mls))
+    mlsM <- maxLik(llf1, start=0, method=method, tol=1, sigma=1)
+    mlsCM <- maxLik(llf1, start=0, method=method, control=list(tol=1), sigma=1)
+    cat("Additional parameters to loglik: open == control()?\n")
+    print(all.equal(mlsM, mlsCM))
+    ## And what about unused parameters?
+    cat("What about unused parameters?\n")
+    try(maxLik(llf1, start=0, method=method, control=list(tol=1),
+               sigma=1, unusedPar=2))
+                            # error
+    N <- 100
+    ## Does this work with constraints?
+    x <- c(rnorm(N, mean=-1), rnorm(N, mean=1))
+    ## First test inequality constraints
+    ## Inequality constraints: x + y + z < 0.5
+    A <- matrix(c(-1, 0, 0,
+                  0, -1, 0,
+                  0, 0, 1), 3, 3, byrow=TRUE)
+    B <- rep(0.5, 3)
+    start <- c(0.4, 0, 0.9)
+    ## analytic gradient
+    cat("Inequality constraints, analytic gradient & Hessian\n")
+    mix <- try(maxLik(logLikMix, 
+                      start=start, method=method,
+                      constraints=list(ineqA=A, ineqB=B)))
+    if(!inherits(mix, "try-error")) {
+       print(summary(mix))
+    }
+    mixGT <- try(maxLik(logLikMix, 
+                        start=start, method=method,
+                        constraints=list(ineqA=A, ineqB=B),
+                        tol=1))
+    if(!inherits(mixGT, "try-error")) {
+       print(summary(mixGT))
+    }
+    mixGTC <- try(maxLik(logLikMix, 
+                     start=start, method=method,
+                     constraints=list(ineqA=A, ineqB=B),
+                     control=list(tol=1)))
+    if(!inherits(mixGTC, "try-error")) {
+       print(all.equal(mixGT, mixGTC))
+    }
+    ## 2d inequality constraints: x + y < 0.5
+    A2 <- matrix(c(-1, -1), 1, 2, byrow=TRUE)
+    B2 <- 0.5
+    start2 <- c(-0.5, 0.5)
+    cat("Inequality constraints, additional parameters\n")
+    mixA <- try(maxLik(logLikMixA, 
+                       start=start2, method=method,
+                       constraints=list(ineqA=A2, ineqB=B2),
+                       tol=1,
+                       rho=0.5))
+    mixAC <- try(maxLik(logLikMixA, 
+                        start=start2, method=method,
+                        constraints=list(ineqA=A2, ineqB=B2),
+                        control=list(tol=1),
+                        rho=0.5))
+    if(!inherits(mixA, "try-error") & !inherits(mixAC, "try-error")) {
+       cat("Coefficients equal?\n")
+       print(all.equal(coef(mixA), coef(mixAC)))
+       cat("Hessians equal?\n")
+       print(all.equal(hessian(mixA), hessian(mixAC)))
+    }
+ }
-- method NR --
----- Initial parameters: -----
fcn value: -207.4 
     parameter initial gradient free
[1,]         1           -2.687    1
[2,]         2           -3.786    1
Condition number of the (active) hessian: 1.815 
-----Iteration 1 -----
--------------
Iteration limit exceeded. 
1  iterations
estimate: 0.8826 1.907 
Function value: -207.1 
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 1 iterations
Return code 4: Iteration limit exceeded.
Log-Likelihood: -207.1 
2  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    0.883      0.191    4.63 3.7e-06 ***
[2,]    1.907      0.134   14.28 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
----- Initial parameters: -----
fcn value: -207.4 
     parameter initial gradient free
[1,]         1           -2.687    1
[2,]         2           -3.786    1
Condition number of the (active) hessian: 1.815 
-----Iteration 1 -----
--------------
Iteration limit exceeded. 
1  iterations
estimate: 0.8826 1.907 
Function value: -207.1 
[1] TRUE
[1] 0.8925
Additional parameters to loglik: open == control()?
[1] TRUE
What about unused parameters?
Error in fnOrig(theta, ...) : unused argument (unusedPar = 2)
Inequality constraints, analytic gradient & Hessian
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
Inequality constraints, additional parameters
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
-- method BFGS --
initial  value 214.576661 
iter   2 value 214.356670
final  value 214.356670 
stopped after 2 iterations
--------------------------------------------
Maximum Likelihood estimation
BFGS maximization, 4 iterations
Return code 1: iteration limit exceeded 
Log-Likelihood: -214.4 
2  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    0.860      0.213    4.03 5.6e-05 ***
[2,]    2.135      0.159   13.40 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
initial  value 214.576661 
iter   2 value 214.356670
final  value 214.356670 
stopped after 2 iterations
[1] TRUE
[1] 0.8599
Additional parameters to loglik: open == control()?
[1] TRUE
What about unused parameters?
Error in fnOrig(theta, ...) : unused argument (unusedPar = 2)
Inequality constraints, analytic gradient & Hessian
--------------------------------------------
Maximum Likelihood estimation
BFGS maximization, 149 iterations
Return code 0: successful convergence 
Log-Likelihood: -332.2 
3  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    0.500      0.128    3.92   9e-05 ***
[2,]   -0.796      0.215   -3.71 0.00021 ***
[3,]    0.830      0.247    3.37 0.00076 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.0001908 
--------------------------------------------
--------------------------------------------
Maximum Likelihood estimation
BFGS maximization, 149 iterations
Return code 0: successful convergence 
Log-Likelihood: -332.2 
3  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    0.500      0.128    3.92   9e-05 ***
[2,]   -0.796      0.215   -3.71 0.00021 ***
[3,]    0.830      0.247    3.37 0.00076 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.0001908 
--------------------------------------------
[1] TRUE
Inequality constraints, additional parameters
Coefficients equal?
[1] TRUE
Hessians equal?
[1] TRUE
-- method BFGSR --
Initial value of the function : -217.6 
-------- Initial parameters: -------
fcn value: -217.6 
     parameter initial gradient free
[1,]         1            1.898    1
[2,]         2            6.419    1
------------------------------------
Iteration  1 
step = 1, lnL = -217.6, chi2 = 0.0004481, function increment = 0.0004479
     param gradient  direction active
[1,]     1    1.897 -1.898e-05      1
[2,]     2    6.415 -6.419e-05      1
--------------------------------------------
--------------
Iteration limit exceeded. 
2  iterations
estimate: 1 2 
Function value: -217.6 
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 2 iterations
Return code 4: Iteration limit exceeded.
Log-Likelihood: -217.6 
2  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]     1.00       0.20     5.0 5.8e-07 ***
[2,]     2.00       0.13    15.4 < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
Initial value of the function : -217.6 
-------- Initial parameters: -------
fcn value: -217.6 
     parameter initial gradient free
[1,]         1            1.898    1
[2,]         2            6.419    1
------------------------------------
Iteration  1 
step = 1, lnL = -217.6, chi2 = 0.0004481, function increment = 0.0004479
     param gradient  direction active
[1,]     1    1.897 -1.898e-05      1
[2,]     2    6.415 -6.419e-05      1
--------------------------------------------
--------------
Iteration limit exceeded. 
2  iterations
estimate: 1 2 
Function value: -217.6 
[1] TRUE
[1] 1.076
Additional parameters to loglik: open == control()?
[1] TRUE
What about unused parameters?
Error in fnOrig(theta, ...) : unused argument (unusedPar = 2)
Inequality constraints, analytic gradient & Hessian
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxBFGSR
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxBFGSR
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxBFGSR
Inequality constraints, additional parameters
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxBFGSR
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxBFGSR
> 
> ### Test adding both default and user-specified parameters through control list
> estimate <- function(control=NULL, ...) {
+    return(maxLik(llf, start=c(1,1),
+                  control=c(list(iterlim=100), control),
+                  ...))
+ }
> m <- estimate(control=list(iterlim=1), fixed=2)
> show(maxControl(m))
A 'MaxControl' object with slots:
tol = 1e-08 
reltol = 1.49e-08 
gradtol = 1e-06 
steptol = 1e-10 
lambdatol = 1e-06 
qrtol = 1e-10 
qac = stephalving 
marquardt_lambda0 = 0.01 
marquardt_lambdaStep = 2 
marquardt_maxLambda = 1e+12 
nm_alpha = 1 
nm_beta = 0.5 
nm_gamma = 2 
sann_cand = <default Gaussian Markov kernel>
sann_temp = 10 
sann_tmax = 10 
sann_randomSeed = 123 
iterlim = 1 
printLevel = 0 
>                            # iterlim should be 1
> print(coef(m))
[1] 0.07158 1.00000
>                            # sigma should be 1.000
> ## Does print.level overwrite 'printLevel'?
> m <- estimate(control=list(printLevel=2, print.level=1))
--------------
successive function values within tolerance limit 
6  iterations
estimate: 0.07169 1.477 
Function value: -361.8 
> show(maxControl(m))
A 'MaxControl' object with slots:
tol = 1e-08 
reltol = 1.49e-08 
gradtol = 1e-06 
steptol = 1e-10 
lambdatol = 1e-06 
qrtol = 1e-10 
qac = stephalving 
marquardt_lambda0 = 0.01 
marquardt_lambdaStep = 2 
marquardt_maxLambda = 1e+12 
nm_alpha = 1 
nm_beta = 0.5 
nm_gamma = 2 
sann_cand = <default Gaussian Markov kernel>
sann_temp = 10 
sann_tmax = 10 
sann_randomSeed = 123 
iterlim = 100 
printLevel = 1 
> 
> ## Does open parameters override everything?
> m <- estimate(control=list(printLevel=2, print.level=1), print.level=0)
> show(maxControl(m))
A 'MaxControl' object with slots:
tol = 1e-08 
reltol = 1.49e-08 
gradtol = 1e-06 
steptol = 1e-10 
lambdatol = 1e-06 
qrtol = 1e-10 
qac = stephalving 
marquardt_lambda0 = 0.01 
marquardt_lambdaStep = 2 
marquardt_maxLambda = 1e+12 
nm_alpha = 1 
nm_beta = 0.5 
nm_gamma = 2 
sann_cand = <default Gaussian Markov kernel>
sann_temp = 10 
sann_tmax = 10 
sann_randomSeed = 123 
iterlim = 100 
printLevel = 0 
> 
> ### does both printLevel, print.level work for condiNumber?
> condiNumber(hessian(m), print.level=0) # no output
> condiNumber(hessian(m), printLevel=0)  # no output
> condiNumber(hessian(m), printLevel=0, print.level=1) # no output
> 
> 
> proc.time()
   user  system elapsed 
  0.981   0.039   1.014 
