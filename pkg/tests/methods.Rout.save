
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Test methods.  Note: only test if methods work in terms of dim, length, etc,
> ## not in terms of values here
> ##
> ## ...
> ## * printing summary with max.columns, max.rows
> 
> library(maxLik)
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> require(testthat)
Loading required package: testthat
> require(sandwich)
Loading required package: sandwich
> set.seed(0)
> 
> ## Test standard methods for "lm"
> x <- runif(20)
> y <- x + rnorm(20)
> m <- lm(y ~ x)
> print(nObs(m))
[1] 20
> print(stdEr(m))
(Intercept)           x 
  0.3578623   0.5687071 
> 
> ## Test maxControl methods:
> set.seed(9)
> x <- rnorm(20, sd=2)
> ll1 <- function(par) dnorm(x, mean=par, sd=1, log=TRUE)
> ll2 <- function(par) dnorm(x, mean=par[1], sd=par[2], log=TRUE)
> for(method in c("NR", "BFGS", "BFGSR")) {
+    cat("-- method", method, "--\n")
+    m <- maxLik(ll2, start=c(0, 2), method=method, control=list(iterlim=1))
+    expect_equal(maxValue(m), -41.35, tolerance=0.01)
+    expect_true(is.vector(gradient(m)), info="'gradient' returns a vector")
+    expect_equal(length(gradient(m)), 2, info="'gradient(m)' is of length 2")
+    expect_true(is.matrix(estfun(m)), info="'estfun' returns a matrix")
+    expect_equal(dim(estfun(m)), c(20,2), info="'estfun(m)' is 20x2 matrix")
+    cat("MaxControl structure:\n")
+    show(maxControl(m))
+ }
-- method NR --
MaxControl structure:
A 'MaxControl' object with slots:
tol = 1e-08 
reltol = 1.490116e-08 
gradtol = 1e-06 
steptol = 1e-10 
lambdatol = 1e-06 
qrtol = 1e-10 
qac = stephalving 
marquardt_lambda0 = 0.01 
marquardt_lambdaStep = 2 
marquardt_maxLambda = 1e+12 
nm_alpha = 1 
nm_beta = 0.5 
nm_gamma = 2 
sann_cand = <default Gaussian Markov kernel>
sann_temp = 10 
sann_tmax = 10 
sann_randomSeed = 123 
SGA_momentum = 0 
Adam_momentum1 = 0.9 
Adam_momentum2 = 0.999 
SG_patience = 
SG_patienceStep = 1 
SG_learningRate = 0.1 
SG_batchSize = 
SG_clip = 
iterlim = 1 
max.rows = 20 
max.cols = 7 
printLevel = 0 
storeValues = FALSE 
storeParameters = FALSE 
-- method BFGS --
MaxControl structure:
A 'MaxControl' object with slots:
tol = 1e-08 
reltol = 1.490116e-08 
gradtol = 1e-06 
steptol = 1e-10 
lambdatol = 1e-06 
qrtol = 1e-10 
qac = stephalving 
marquardt_lambda0 = 0.01 
marquardt_lambdaStep = 2 
marquardt_maxLambda = 1e+12 
nm_alpha = 1 
nm_beta = 0.5 
nm_gamma = 2 
sann_cand = <default Gaussian Markov kernel>
sann_temp = 10 
sann_tmax = 10 
sann_randomSeed = 123 
SGA_momentum = 0 
Adam_momentum1 = 0.9 
Adam_momentum2 = 0.999 
SG_patience = 
SG_patienceStep = 1 
SG_learningRate = 0.1 
SG_batchSize = 
SG_clip = 
iterlim = 1 
max.rows = 20 
max.cols = 7 
printLevel = 0 
storeValues = FALSE 
storeParameters = FALSE 
-- method BFGSR --
MaxControl structure:
A 'MaxControl' object with slots:
tol = 1e-08 
reltol = 1.490116e-08 
gradtol = 1e-06 
steptol = 1e-10 
lambdatol = 1e-06 
qrtol = 1e-10 
qac = stephalving 
marquardt_lambda0 = 0.01 
marquardt_lambdaStep = 2 
marquardt_maxLambda = 1e+12 
nm_alpha = 1 
nm_beta = 0.5 
nm_gamma = 2 
sann_cand = <default Gaussian Markov kernel>
sann_temp = 10 
sann_tmax = 10 
sann_randomSeed = 123 
SGA_momentum = 0 
Adam_momentum1 = 0.9 
Adam_momentum2 = 0.999 
SG_patience = 
SG_patienceStep = 1 
SG_learningRate = 0.1 
SG_batchSize = 
SG_clip = 
iterlim = 1 
max.rows = 20 
max.cols = 7 
printLevel = 0 
storeValues = FALSE 
storeParameters = FALSE 
> 
> ## Test methods for non-likelihood optimization
> hatf <- function(theta) exp(- theta %*% theta)
> for(optimizer in c(maxNR, maxBFGSR, maxBFGS, maxNM, maxSANN, maxCG)) {
+    name <- as.character(quote(optimizer))
+    res <- optimizer(hatf, start=c(1,1))
+    if(name %in% c("maxNR", "maxBFGS", "maxNM", "maxCG")) {
+       expect_equal(coef(res), c(0,0), tol=1e-5,
+                    info=paste0(name, ": result (0,0)"))
+    }
+    expect_equal(objectiveFn(res), hatf, info=paste0(name, ": objectiveFn correct"))
+ }
> 
> ## Test maxLik vcov related methods
> set.seed( 15 )
> t <- rexp(20, 2)
> loglik <- function(theta) log(theta) - theta*t
> gradlik <- function(theta) 1/theta - t
> hesslik <- function(theta) -100/theta^2
> a <- maxLik(loglik, start=1)
> expect_equal(dim(vcov(a)), c(1,1), info="vcov 1D numeric correct")
> expect_equal(length(stdEr(a)), 1, info="stdEr 1D numeric correct")
> a <- maxLik(loglik, gradlik, hesslik, start=1)
> expect_equal(dim(vcov(a)), c(1,1), info="vcov 1D analytic correct")
> expect_equal(length(stdEr(a)), 1, info="stdEr 1D analytic correct")
> 
> ### ---------- printing ----------
> ### ---------- max.columns, max.rows ----------
> loglik <- function(beta) {
+    e <- y - X %*% beta
+    -crossprod(e)
+ }
> gradlik <- function(beta) {
+    e <- y - X %*% beta
+    l <- crossprod(e)
+    g <- t(-2*t(X) %*% e)
+    -g
+ }
> ## linear regression with many columns
> X <- matrix(rnorm(20*15), 20, 15)
> beta <- rep(1, ncol(X))
> y <- X %*% beta + rnorm(20, sd=0.3)
> m <- maxNR(loglik, gradlik, start=rep(1, ncol(X)), iterlim=1)
> options(digits=2)
> print(summary(m, hessian=TRUE), max.rows=4, max.cols=2)
--------------------------------------------
Newton-Raphson maximisation 
Number of iterations: 1 
Return code: 1 
gradient close to zero 
Function value: -0.72 
Estimates:
     estimate gradient
[1,]     1.10  1.2e-09
[2,]     0.95  4.8e-10
[3,]     1.00  1.7e-09
[4,]     1.05 -6.9e-10
 reached getOption("max.rows") -- omitted 11 rows
Hessian:
      [,1]  [,2]
[1,] -54.0  12.7
[2,]  12.7 -43.8
[3,]   2.7   4.9
[4,]   3.1   8.1
 reached getOption("max.cols") -- omitted 13 columns
 reached getOption("max.rows") -- omitted 11 rows
--------------------------------------------
> 
> proc.time()
   user  system elapsed 
   1.22    0.59    0.96 
