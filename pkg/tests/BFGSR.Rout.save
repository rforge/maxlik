
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BFGSR-related tests
> 
> ## 1. Test maximization algorithm for convex regions
> ## 
> ## Optimize quadratic form t(D) %*% W %*% D with p.d. weight matrix
> ## (ie unbounded problems).
> ## All solutions should go to large values with a message about successful convergence
> quadForm <- function(D) {
+    return(t(D) %*% W %*% D)
+ }
> N <- 3
>                            # 3-dimensional case
> ## a) test quadratic function t(D) %*% D
> W <- diag(N)
> library(maxLik)
Loading required package: miscTools
> D <- rep(1/N, N)
> res <- maxBFGSR(quadForm, start=D)
> summary(res)
--------------------------------------------
BFGSR maximization 
Number of iterations: 20 
Return code: 1 
gradient close to zero 
Function value: 1.182985e+24 
Estimates:
         estimate gradient
[1,] 5.932011e+09        0
[2,] 2.922554e+10        0
[3,] 1.087242e+12        0
--------------------------------------------
> 
> ## b) add noice to
> set.seed(0)
> W <- diag(N) + matrix(runif(N*N), N, N)
>                            # diagonal weight matrix with some noise
> D <- rep(1/N, N)
> res <- maxBFGSR(quadForm, start=D)
> summary(res)
--------------------------------------------
BFGSR maximization 
Number of iterations: 17 
Return code: 1 
gradient close to zero 
Function value: 2.411885e+21 
Estimates:
        estimate gradient
[1,]  8877158828        0
[2,] 33431909639        0
[3,] -2635180904        0
--------------------------------------------
> 
> ## Next, optimize hat function in non-concave region.  Does not work well.
> hat <- function(param) {
+    ## Hat function.  Hessian negative definite if sqrt(x^2 + y^2) < 0.5
+    x <- param[1]
+    y <- param[2]
+    exp(-x^2 - y^2)
+ }
> 
> summary(hatNC <- maxBFGSR(hat, start=c(1,1), tol=0, reltol=0))
--------------------------------------------
BFGSR maximization 
Number of iterations: 20 
Return code: 1 
gradient close to zero 
Function value: 1 
Estimates:
          estimate     gradient
[1,] -1.027022e-07 2.053913e-07
[2,] -9.060433e-08 1.811884e-07
--------------------------------------------
>                            # should converge to c(0,0).
> 
> ## Test BFGSR with fixed parameters and equality constraints
> ## Optimize 3D hat with one parameter fixed (== 2D hat).
> ## Add an equality constraint on that
> hat3 <- function(param) {
+    ## Hat function.  Hessian negative definite if sqrt(x^2 + y^2) < 0.5
+    x <- param[1]
+    y <- param[2]
+    z <- param[3]
+    exp(-x^2-y^2-z^2)
+ }
> sv <- c(1,1,1)
> ## constraints: x + y + z = 2
> A <- matrix(c(1,1,1), 1, 3)
> B <- -2
> constraints <- list(eqA=A, eqB=B)
> summary(hat3CF <- maxBFGSR(hat3, start=sv, constraints=constraints, fixed=3))
--------------------------------------------
BFGSR maximization 
Number of iterations: 11 
Return code: 2 
successive function values within tolerance limit 
Function value: 0.2231336 
Estimates:
      estimate   gradient
[1,] 0.4998756 -0.2230818
[2,] 0.5000925 -0.2231786
[3,] 1.0000000 -0.4462745

Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
5  outer iterations, barrier value 1.013669e-09 
--------------------------------------------
> 
> 
