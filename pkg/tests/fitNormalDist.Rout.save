
R version 2.11.0 (2010-04-22)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load the 'maxLik' package
> library(maxLik)
> 
> ## data to fit a normal distribution
> # set seed for pseudo random numbers
> set.seed( 123 )
> # generate a variable from normally distributed random numbers
> x <- rnorm( 100, 1, 2 )
> xSaved <- x
> 
> ## log likelihood function
> llf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    N <- length( x )
+    llValue <- -0.5 * N * log( 2 * pi ) - N * log( sigma ) -
+       0.5 * sum( ( x - mu )^2 / sigma^2 )
+    return( llValue )
+ }
> 
> ## log likelihood function (individual observations)
> llfInd <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    llValues <- -0.5 * log( 2 * pi ) - log( sigma ) -
+       0.5 * ( x - mu )^2 / sigma^2
+    return( llValues )
+ }
> 
> ## function to calculate analytical gradients
> gf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    N <- length( x )
+    llGrad <- c( sum( ( x - mu ) / sigma^2 ),
+       - N / sigma + sum( ( x - mu )^2 / sigma^3 ) )
+    return( llGrad )
+ }
> 
> ## function to calculate analytical gradients (individual observations)
> gfInd <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    llGrads <- cbind( ( x - mu ) / sigma^2,
+       - 1 / sigma + ( x - mu )^2 / sigma^3 )
+    return( llGrads )
+ }
> 
> ## function to calculate analytical Hessians
> hf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    N <- length( x )
+    llHess <- matrix( c(
+       N * ( - 1 / sigma^2 ),
+       sum( - 2 * ( x - mu ) / sigma^3 ),
+       sum( - 2 * ( x - mu ) / sigma^3 ),
+       N / sigma^2 + sum( - 3 * ( x - mu )^2 / sigma^4 ) ),
+       nrow = 2, ncol = 2 )
+    return( llHess )
+ }
> 
> # start values
> startVal <- c( mu = 0, sigma = 1 )
> 
> ## NR method
> ml <- maxLik( llf, start = startVal )
> print( ml )
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180812 1.816481 
> summary( ml )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18176  6.4965  8.22e-11 ***
sigma  1.81648    0.12846 14.1400 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( ml )
   mu sigma 
 TRUE  TRUE 
> AIC( ml )
[1] 407.1679
> coef( ml )
      mu    sigma 
1.180812 1.816481 
> condiNumber( ml )
mu 	 1 
sigma 	 1.668128 
> hessian( ml )
             mu     sigma
mu    -30.26912   0.00000
sigma   0.00000 -60.59508
> logLik( ml )
[1] -201.5839
> maximType( ml )
[1] "Newton-Raphson maximisation"
> nIter( ml )
[1] 7
> nObs( ml )
NULL
> nParam( ml )
[1] 2
> returnCode( ml )
[1] 1
> returnMessage( ml )
[1] "gradient close to zero"
> vcov( ml )
              mu      sigma
mu    0.03303697 0.00000000
sigma 0.00000000 0.01650299
> logLik( summary( ml ) )
[1] -201.5839
> mlInd <- maxLik( llfInd, start = startVal )
> summary( mlInd )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18168  6.4996 8.055e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( ml, mlInd )
[1] "Component 3: Mean relative difference: 0.3571429"  
[2] "Component 4: Mean relative difference: 0.001563966"
> 
> # with analytical gradients
> mlg <- maxLik( llf, gf, start = startVal )
> summary( mlg )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18165  6.5005 8.003e-11 ***
sigma  1.81648    0.12844 14.1421 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( ml, mlg )
[1] "Component 3: Mean relative difference: 1.037881"    
[2] "Component 4: Mean relative difference: 0.0006146669"
> mlgInd <- maxLik( llfInd, gfInd, start = startVal )
> all.equal( mlInd, mlgInd )
[1] "Component 3: Mean relative difference: 1.058926"   
[2] "Component 4: Mean relative difference: 0.001148752"
> all.equal( mlg, mlgInd )
[1] TRUE
> 
> # with analytical gradients and Hessians
> mlgh <- maxLik( llf, gf, hf, start = startVal )
> all.equal( mlg, mlgh )
[1] TRUE
> 
> 
> ## BHHH method
> mlBHHH <- try( maxLik( llf, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  if the gradients (argument 'grad') are not provided by the user, the BHHH method requires that the log-likelihood function (argument 'fn') returns a numeric vector, where each element must be the log-likelihood value corresponding to an individual (independent) observation
> x <- xSaved[1]
> try( maxLik( llfInd, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  if the gradients (argument 'grad') are not provided by the user, the BHHH method requires that the log-likelihood function (argument 'fn') returns a numeric vector, where each element must be the log-likelihood value corresponding to an individual (independent) observation
> x <- xSaved[1:2]
> try( maxLik( llfInd, start = startVal, method = "BHHH" ) )
Maximum Likelihood estimation
BHHH maximisation, 8 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -0.6227434 (2 free parameter(s))
Estimate(s): 0.2158296 0.3302445 
There were 25 warnings (use warnings() to see them)
> x <- xSaved
> mlBHHH <- maxLik( llfInd, start = startVal, method = "BHHH" )
> print( mlBHHH )
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180812 1.816480 
> summary( mlBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18183  6.4941 8.354e-11 ***
sigma  1.81648    0.13408 13.5473 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlBHHH )
   mu sigma 
 TRUE  TRUE 
> AIC( mlBHHH )
[1] 407.1679
> coef( mlBHHH )
      mu    sigma 
1.180812 1.816480 
> condiNumber( mlBHHH )
mu 	 1 
sigma 	 1.719018 
> hessian( mlBHHH )
              mu      sigma
mu    -30.306718  -1.833532
sigma  -1.833532 -55.732477
> logLik( mlBHHH )
[1] -201.5839
> maximType( mlBHHH )
[1] "BHHH maximisation"
> nIter( mlBHHH )
[1] 13
> nObs( mlBHHH )
NULL
> nParam( mlBHHH )
[1] 2
> returnCode( mlBHHH )
[1] 2
> returnMessage( mlBHHH )
[1] "successive function values within tolerance limit"
> vcov( mlBHHH )
                mu        sigma
mu     0.033061790 -0.001087693
sigma -0.001087693  0.017978643
> logLik( summary( mlBHHH ) )
[1] -201.5839
> all.equal( ml, mlBHHH )
[1] "Component 2: Mean relative difference: 2.538011e-07"
[2] "Component 3: Mean relative difference: 95.02288"    
[3] "Component 4: Mean relative difference: 0.0942865"   
[4] "Component 5: Mean relative difference: 1"           
[5] "Component 6: 1 string mismatch"                     
[6] "Component 9: Mean relative difference: 0.8571429"   
[7] "Component 10: 1 string mismatch"                    
> 
> # with analytical gradients
> mlgBHHH <- try( maxLik( llf, gf, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : Gradient is not a matrix.
the BHHH method requires that the gradient function
(argument 'grad') returns a numeric matrix,
where each row must correspond to the gradient(s)
of the log-likelihood function at an individual
(independent) observation and each column must
correspond to a parameter
> mlgBHHH <- try( maxLik( llfInd, gf, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : Gradient is not a matrix.
the BHHH method requires that the gradient function
(argument 'grad') returns a numeric matrix,
where each row must correspond to the gradient(s)
of the log-likelihood function at an individual
(independent) observation and each column must
correspond to a parameter
> x <- xSaved[1]
> try( maxLik( llf, gfInd, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  the matrix returned by the gradient function (argument 'grad') must have at least as many rows as the number of parameters (2), where each row must correspond to the gradients of the log-likelihood function of an individual (independent) observation:
 currently, there are (is) 2 parameter(s) but the gradient matrix has only 1 row(s)
> try( maxLik( llfInd, gfInd, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  the matrix returned by the gradient function (argument 'grad') must have at least as many rows as the number of parameters (2), where each row must correspond to the gradients of the log-likelihood function of an individual (independent) observation:
 currently, there are (is) 2 parameter(s) but the gradient matrix has only 1 row(s)
> x <- xSaved[1:2]
> try( maxLik( llf, gfInd, start = startVal, method = "BHHH" ) )
Maximum Likelihood estimation
BHHH maximisation, 8 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -0.6227434 (2 free parameter(s))
Estimate(s): 0.2158296 0.3302445 
There were 25 warnings (use warnings() to see them)
> try( maxLik( llfInd, gfInd, start = startVal, method = "BHHH" ) )
Maximum Likelihood estimation
BHHH maximisation, 8 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -0.6227434 (2 free parameter(s))
Estimate(s): 0.2158296 0.3302445 
There were 25 warnings (use warnings() to see them)
> x <- xSaved
> mlgBHHH <- maxLik( llfInd, gfInd, start = startVal, method = "BHHH" )
> summary( mlgBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18183  6.4941 8.354e-11 ***
sigma  1.81648    0.13408 13.5473 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBHHH, mlgBHHH )
[1] "Component 3: Mean relative difference: 0.0003213666"
> all.equal( mlg, mlgBHHH )
[1] "Component 2: Mean relative difference: 2.533978e-07"
[2] "Component 3: Mean absolute difference: 1.880678e-05"
[3] "Component 4: Mean relative difference: 0.09401655"  
[4] "Component 5: Mean relative difference: 1"           
[5] "Component 6: 1 string mismatch"                     
[6] "Component 9: Mean relative difference: 0.8571429"   
[7] "Component 10: 1 string mismatch"                    
> mlgBHHH2 <- maxLik( llf, gfInd, start = startVal, method = "BHHH" )
> all.equal( mlgBHHH, mlgBHHH2 )
[1] TRUE
> 
> # with unused Hessian
> mlghBHHH <- maxLik( llfInd, gfInd, hf, start = startVal, method = "BHHH" )
> all.equal( mlgBHHH, mlghBHHH )
[1] TRUE
> 
> 
> ## BFGS method
> mlBFGS <- maxLik( llf, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> print( mlBFGS )
Maximum Likelihood estimation
BFGS maximisation, 36 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180811 1.816481 
> summary( mlBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 36 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18151  6.5057 7.736e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlBFGS )
   mu sigma 
 TRUE  TRUE 
> AIC( mlBFGS )
[1] 407.1679
> coef( mlBFGS )
      mu    sigma 
1.180811 1.816481 
> condiNumber( mlBFGS )
mu 	 1 
sigma 	 1.667864 
> hessian( mlBFGS )
                mu        sigma
mu    -30.35438567  -0.02842171
sigma  -0.02842171 -60.65192792
> logLik( mlBFGS )
[1] -201.5839
> maximType( mlBFGS )
[1] "BFGS maximisation"
> nIter( mlBFGS )
function 
      36 
> nObs( mlBFGS )
NULL
> nParam( mlBFGS )
[1] 2
> returnCode( mlBFGS )
[1] 0
> returnMessage( mlBFGS )
[1] "successful convergence "
> vcov( mlBFGS )
                 mu         sigma
mu     3.294418e-02 -1.543776e-05
sigma -1.543776e-05  1.648753e-02
> logLik( summary( mlBFGS ) )
[1] -201.5839
> all.equal( ml, mlBFGS )
[1] "Length mismatch: comparison on first 10 components" 
[2] "Component 2: Mean relative difference: 6.480966e-07"
[3] "Component 3: Mean relative difference: 201.8571"    
[4] "Component 4: Mean relative difference: 0.002189553" 
[5] "Component 5: Mean relative difference: 1"           
[6] "Component 6: 1 string mismatch"                     
[7] "Component 9: names for current but not for target"  
[8] "Component 9: Mean relative difference: 4.142857"    
[9] "Component 10: 1 string mismatch"                    
> mlIndBFGS <- maxLik( llfInd, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> summary( mlIndBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 36 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18176  6.4965  8.22e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBFGS, mlIndBFGS )
[1] "Component 3: Mean relative difference: 0.0006583278"
[2] "Component 4: Mean relative difference: 0.004672897" 
> # with individual log likelihood values
> mlIndBFGS <- maxLik( llfInd, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> summary( mlIndBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 36 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18176  6.4965  8.22e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBFGS, mlIndBFGS )
[1] "Component 3: Mean relative difference: 0.0006583278"
[2] "Component 4: Mean relative difference: 0.004672897" 
> 
> # with analytical gradients
> mlgBFGS <- maxLik( llf, gf, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> summary( mlgBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 36 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18165  6.5005 8.003e-11 ***
sigma  1.81648    0.12844 14.1421 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBFGS, mlgBFGS )
[1] "Component 3: Mean relative difference: 0.0004838186"
[2] "Component 4: Mean relative difference: 0.001572110" 
> all.equal( mlg, mlgBFGS )
[1] "Length mismatch: comparison on first 10 components" 
[2] "Component 2: Mean relative difference: 6.483767e-07"
[3] "Component 3: Mean absolute difference: 4.02496e-05" 
[4] "Component 4: Mean relative difference: 2.472881e-06"
[5] "Component 5: Mean relative difference: 1"           
[6] "Component 6: 1 string mismatch"                     
[7] "Component 9: names for current but not for target"  
[8] "Component 9: Mean relative difference: 4.142857"    
[9] "Component 10: 1 string mismatch"                    
> mlgIndBFGS <- maxLik( llfInd, gfInd, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> all.equal( mlgBFGS, mlgIndBFGS )
[1] TRUE
> 
> # with unused Hessian
> mlghBFGS <- maxLik( llf, gf, hf, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> all.equal( mlgBFGS, mlghBFGS )
[1] TRUE
> 
> 
> ## NM method
> mlNM <- maxLik( llf, start = startVal, method = "NM" )
> print( mlNM )
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180608 1.816636 
> summary( mlNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18168  6.4984 8.116e-11 ***
sigma  1.81664    0.12852 14.1346 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlNM )
   mu sigma 
 TRUE  TRUE 
> AIC( mlNM )
[1] 407.1679
> coef( mlNM )
      mu    sigma 
1.180608 1.816636 
> condiNumber( mlNM )
mu 	 1 
sigma 	 1.667866 
> hessian( mlNM )
                mu        sigma
mu    -30.29754225   0.02842171
sigma   0.02842171 -60.53824109
> logLik( mlNM )
[1] -201.5839
> maximType( mlNM )
[1] "Nelder-Mead maximisation"
> nIter( mlNM )
function 
      63 
> nObs( mlNM )
NULL
> nParam( mlNM )
[1] 2
> returnCode( mlNM )
[1] 0
> returnMessage( mlNM )
[1] "successful convergence "
> vcov( mlNM )
                mu        sigma
mu    3.300599e-02 1.549577e-05
sigma 1.549577e-05 1.651849e-02
> logLik( summary( mlNM ) )
[1] -201.5839
> all.equal( ml, mlNM )
[1] "Length mismatch: comparison on first 10 components" 
[2] "Component 2: Mean relative difference: 0.0001198380"
[3] "Component 3: Mean relative difference: 39189.07"    
[4] "Component 4: Mean relative difference: 0.001563966" 
[5] "Component 5: Mean relative difference: 1"           
[6] "Component 6: 1 string mismatch"                     
[7] "Component 9: names for current but not for target"  
[8] "Component 9: Mean relative difference: 8"           
[9] "Component 10: 1 string mismatch"                    
> # with individual log likelihood values
> mlIndNM <- maxLik( llfInd, start = startVal, method = "NM" )
> summary( mlIndNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18159  6.5015 7.953e-11 ***
sigma  1.81664    0.12843 14.1445 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlNM, mlIndNM )
[1] "Component 3: Mean relative difference: 4.60403e-06"
[2] "Component 4: Mean relative difference: 0.002501563"
> 
> # with unused analytical gradients
> mlgNM <- maxLik( llf, gf, start = startVal, method = "NM" )
> summary( mlgNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18166  6.4989 8.093e-11 ***
sigma  1.81664    0.12847 14.1403 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlNM, mlgNM )
[1] "Component 3: Mean relative difference: 1.839327e-06"
[2] "Component 4: Mean relative difference: 0.001359750" 
> # with individual log likelihood values and gradients
> mlgIndNM <- maxLik( llfInd, gfInd, start = startVal, method = "NM" )
> summary( mlgIndNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18166  6.4989 8.093e-11 ***
sigma  1.81664    0.12847 14.1403 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlgNM, mlgIndNM )
[1] TRUE
> 
> # with unused analytical gradients and Hessian
> mlghNM <- maxLik( llf, gf, hf, start = startVal, method = "NM" )
> all.equal( mlgNM, mlghNM )
[1] TRUE
> 
> 
> ## SANN method
> mlSANN <- maxLik( llf, start = startVal, method = "SANN" )
> print( mlSANN )
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 (2 free parameter(s))
Estimate(s): 1.181777 1.816519 
> summary( mlSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18176  6.5018 7.935e-11 ***
sigma  1.81652    0.12849 14.1370 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlSANN )
   mu sigma 
 TRUE  TRUE 
> AIC( mlSANN )
[1] 407.1679
> coef( mlSANN )
      mu    sigma 
1.181777 1.816519 
> condiNumber( mlSANN )
mu 	 1 
sigma 	 1.672721 
> hessian( mlSANN )
                mu        sigma
mu    -30.26912054   0.05684342
sigma   0.05684342 -60.56666280
> logLik( mlSANN )
[1] -201.5840
> maximType( mlSANN )
[1] "SANN maximisation"
> nIter( mlSANN )
function 
   10000 
> nObs( mlSANN )
NULL
> nParam( mlSANN )
[1] 2
> returnCode( mlSANN )
[1] 0
> returnMessage( mlSANN )
[1] "successful convergence "
> vcov( mlSANN )
                mu        sigma
mu    3.303703e-02 3.100613e-05
sigma 3.100613e-05 1.651076e-02
> logLik( summary( mlSANN ) )
[1] -201.5840
> all.equal( ml, mlSANN )
 [1] "Length mismatch: comparison on first 10 components" 
 [2] "Component 1: Mean relative difference: 7.028622e-08"
 [3] "Component 2: Mean relative difference: 0.0003349168"
 [4] "Component 3: Mean relative difference: 79340.21"    
 [5] "Component 4: Mean relative difference: 0.002345216" 
 [6] "Component 5: Mean relative difference: 1"           
 [7] "Component 6: 1 string mismatch"                     
 [8] "Component 9: names for current but not for target"  
 [9] "Component 9: Mean relative difference: 1427.571"    
[10] "Component 10: 1 string mismatch"                    
> # with individual log likelihood values
> mlIndSANN <- maxLik( llfInd, start = startVal, method = "SANN" )
> summary( mlIndSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18159  6.5079  7.62e-11 ***
sigma  1.81652    0.12843 14.1436 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlSANN, mlIndSANN )
[1] "Component 4: Mean relative difference: 0.001875"
> 
> # with unused analytical gradients
> mlgSANN <- maxLik( llf, gf, start = startVal, method = "SANN" )
> summary( mlgSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18165  6.5057 7.732e-11 ***
sigma  1.81652    0.12845 14.1417 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlSANN, mlgSANN )
[1] "Component 3: Mean relative difference: 7.284589e-07"
[2] "Component 4: Mean relative difference: 0.001383963" 
> # with individual log likelihood values and gradients
> mlgIndSANN <- maxLik( llfInd, gfInd, start = startVal, method = "SANN" )
> summary( mlgIndSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18165  6.5057 7.732e-11 ***
sigma  1.81652    0.12845 14.1417 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlgSANN, mlgIndSANN )
[1] TRUE
> 
> # with unused analytical gradients and Hessian
> mlghSANN <- maxLik( llf, gf, hf, start = startVal, method = "SANN" )
> all.equal( mlgSANN, mlghSANN )
[1] TRUE
> 
> # with a user-specified function to generate a new candidate point
> mlSANNCand <- maxLik( llf, start = startVal, method = "SANN",
+    cand = function(x)c(rnorm(1,x[1]),rnorm(1,x[2])) )
There were 50 or more warnings (use warnings() to see the first 50)
> summary( mlSANNCand )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5902 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.20031    0.18127  6.6217 3.551e-11 ***
sigma  1.81253    0.12773 14.1903 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlSANNCand, mlSANN )
[1] "Component 1: Mean relative difference: 3.099239e-05"
[2] "Component 2: Mean relative difference: 0.007475283" 
[3] "Component 3: Mean relative difference: 0.9679423"   
[4] "Component 4: Mean relative difference: 0.02200489"  
> 
> ############### with fixed parameters ###############
> # start values
> startValFix <- c( mu = 1, sigma = 1 )
> 
> # fix mu (the mean ) at its start value
> isFixed <- c( TRUE, FALSE )
> 
> ## NR method with fixed parameters
> mlFix <- maxLik( llf, start = startValFix, activePar = !isFixed )
> mlFix1 <- maxLik( llf, start = startValFix, activePar = 2 )
> all.equal( mlFix, mlFix1 )
[1] TRUE
> mlFix2 <- maxLik( llf, start = startValFix, fixed = isFixed )
> all.equal( mlFix, mlFix2 )
[1] TRUE
> mlFix3 <- maxLik( llf, start = startValFix, fixed = "mu" )
> all.equal( mlFix, mlFix3 )
[1] TRUE
> mlFix4 <- maxLik( llf, start = startValFix, fixed = 1 )
> all.equal( mlFix, mlFix4 )
[1] TRUE
> print( mlFix )
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825457 
> summary( mlFix )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12907  14.143 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFix )
   mu sigma 
FALSE  TRUE 
> AIC( mlFix )
[1] 406.1538
> coef( mlFix )
      mu    sigma 
1.000000 1.825457 
> condiNumber( mlFix )
sigma 	 1 
> hessian( mlFix )
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> logLik( mlFix )
[1] -202.0769
> maximType( mlFix )
[1] "Newton-Raphson maximisation"
> nIter( mlFix )
[1] 7
> nObs( mlFix )
NULL
> nParam( mlFix )
[1] 2
> returnCode( mlFix )
[1] 1
> returnMessage( mlFix )
[1] "gradient close to zero"
> vcov( mlFix )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01665927
> logLik( summary( mlFix ) )
[1] -202.0769
> mlIndFix <- maxLik( llfInd, start = startValFix, activePar = !isFixed )
> mlIndFix1 <- maxLik( llfInd, start = startValFix, activePar = 2 )
> all.equal( mlIndFix, mlIndFix1 )
[1] TRUE
> mlIndFix2 <- maxLik( llfInd, start = startValFix, fixed = isFixed )
> all.equal( mlIndFix, mlIndFix2 )
[1] TRUE
> mlIndFix3 <- maxLik( llfInd, start = startValFix, fixed = "mu" )
> all.equal( mlIndFix, mlIndFix3 )
[1] TRUE
> mlIndFix4 <- maxLik( llfInd, start = startValFix, fixed = 1 )
> all.equal( mlIndFix, mlIndFix4 )
[1] TRUE
> summary( mlIndFix )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12907  14.143 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFix, mlIndFix )
[1] "Component 3: Mean relative difference: 1"
> mlFix[[3]]
          mu        sigma 
          NA 2.842171e-08 
> mlIndFix[[3]]
   mu sigma 
   NA     0 
> 
> # with analytical gradients
> mlgFix <- maxLik( llf, gf, start = startValFix, activePar = !isFixed )
> mlgFix1 <- maxLik( llf, gf, start = startValFix, activePar = 2 )
> all.equal( mlgFix, mlgFix1 )
[1] TRUE
> mlgFix2 <- maxLik( llf, gf, start = startValFix, fixed = isFixed )
> all.equal( mlgFix, mlgFix2 )
[1] TRUE
> summary( mlgFix )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12908  14.142 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFix, mlgFix )
[1] "Component 3: 'is.NA' value mismatch: 0 in current 1 in target"
[2] "Component 4: 'is.NA' value mismatch: 2 in current 3 in target"
> mlFix[[3]]
          mu        sigma 
          NA 2.842171e-08 
> mlgFix[[3]]
          mu        sigma 
5.426045e+00 5.542233e-13 
> mlFix[[4]]
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> mlgFix[[4]]
      mu     sigma
mu    NA  -5.94486
sigma NA -60.01870
> mlgIndFix <- maxLik( llfInd, gfInd, start = startValFix, activePar = !isFixed )
> all.equal( mlIndFix, mlgIndFix )
[1] "Component 3: 'is.NA' value mismatch: 0 in current 1 in target"
[2] "Component 4: 'is.NA' value mismatch: 2 in current 3 in target"
> mlIndFix[[3]]
   mu sigma 
   NA     0 
> mlgIndFix[[3]]
          mu        sigma 
5.426045e+00 5.539458e-13 
> mlIndFix[[4]]
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> mlgIndFix[[4]]
      mu     sigma
mu    NA  -5.94486
sigma NA -60.01870
> all.equal( mlgFix, mlgIndFix )
[1] TRUE
> 
> # with analytical gradients and Hessians
> mlghFix <- maxLik( llf, gf, hf, start = startValFix, activePar = !isFixed )
> all.equal( mlgFix, mlghFix )
[1] "Component 4: 'is.NA' value mismatch: 0 in current 2 in target"
> mlgFix[[4]]
      mu     sigma
mu    NA  -5.94486
sigma NA -60.01870
> mlghFix[[4]]
             mu     sigma
mu    -30.00935  -5.94486
sigma  -5.94486 -60.01870
> 
> ## BHHH method with fixed parameters
> mlFixBHHH <- maxLik( llfInd, start = startValFix, activePar = !isFixed,
+    method = "BHHH" )
> mlFixBHHH1 <- maxLik( llfInd, start = startValFix, activePar = 2,
+    method = "BHHH" )
> all.equal( mlFixBHHH, mlFixBHHH1 )
[1] TRUE
> mlFixBHHH2 <- maxLik( llfInd, start = startValFix, fixed = isFixed,
+    method = "BHHH" )
> all.equal( mlFixBHHH, mlFixBHHH2 )
[1] TRUE
> mlFixBHHH3 <- maxLik( llfInd, start = startValFix, fixed = "mu",
+    method = "BHHH" )
> all.equal( mlFixBHHH, mlFixBHHH3 )
[1] TRUE
> mlFixBHHH4 <- maxLik( llfInd, start = startValFix, fixed = 1,
+    method = "BHHH" )
> all.equal( mlFixBHHH, mlFixBHHH4 )
[1] TRUE
> print( mlFixBHHH )
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825458 
> summary( mlFixBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.13365  13.658 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFixBHHH )
   mu sigma 
FALSE  TRUE 
> AIC( mlFixBHHH )
[1] 406.1538
> coef( mlFixBHHH )
      mu    sigma 
1.000000 1.825458 
> condiNumber( mlFixBHHH )
sigma 	 1 
> hessian( mlFixBHHH )
             mu     sigma
mu    -30.00934  -7.67543
sigma  -7.67543 -55.98293
> logLik( mlFixBHHH )
[1] -202.0769
> maximType( mlFixBHHH )
[1] "BHHH maximisation"
> nIter( mlFixBHHH )
[1] 10
> nObs( mlFixBHHH )
NULL
> nParam( mlFixBHHH )
[1] 2
> returnCode( mlFixBHHH )
[1] 2
> returnMessage( mlFixBHHH )
[1] "successive function values within tolerance limit"
> vcov( mlFixBHHH )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01786259
> logLik( summary( mlFixBHHH ) )
[1] -202.0769
> all.equal( mlFix[ -c( 5, 6, 9, 10 ) ], mlFixBHHH[ -c( 5, 6, 9, 10 ) ] )
[1] "Component 2: Mean relative difference: 7.729473e-08"          
[2] "Component 3: 'is.NA' value mismatch: 0 in current 1 in target"
[3] "Component 4: 'is.NA' value mismatch: 0 in current 3 in target"
> mlFix[[ 3 ]]
          mu        sigma 
          NA 2.842171e-08 
> mlFixBHHH[[ 3 ]]
           mu         sigma 
 5.426044e+00 -8.473666e-06 
> mlFix[[ 4 ]]
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> mlFixBHHH[[ 4 ]]
             mu     sigma
mu    -30.00934  -7.67543
sigma  -7.67543 -55.98293
> 
> # with analytical gradients
> mlgFixBHHH <- maxLik( llfInd, gfInd, start = startValFix, activePar = !isFixed,
+    method = "BHHH" )
> mlgFixBHHH1 <- maxLik( llfInd, gfInd, start = startValFix, activePar = 2,
+    method = "BHHH" )
> all.equal( mlgFixBHHH, mlgFixBHHH1 )
[1] TRUE
> mlgFixBHHH2 <- maxLik( llfInd, gfInd, start = startValFix, fixed = isFixed,
+    method = "BHHH" )
> all.equal( mlgFixBHHH, mlgFixBHHH2 )
[1] TRUE
> mlgFixBHHH3 <- maxLik( llfInd, gfInd, start = startValFix, fixed = "mu",
+    method = "BHHH" )
> all.equal( mlgFixBHHH, mlgFixBHHH3 )
[1] TRUE
> mlgFixBHHH4 <- maxLik( llfInd, gfInd, start = startValFix, fixed = 1,
+    method = "BHHH" )
> all.equal( mlgFixBHHH, mlgFixBHHH4 )
[1] TRUE
> summary( mlgFixBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.13365  13.658 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFixBHHH, mlgFixBHHH )
[1] TRUE
> mlgFixBHHH2 <- maxLik( llf, gfInd, start = startValFix, activePar = !isFixed,
+    method = "BHHH")
> all.equal( mlgFixBHHH, mlgFixBHHH2 )
[1] TRUE
> 
> # with unused Hessians
> mlghFixBHHH <- maxLik( llfInd, gfInd, hf, start = startValFix, activePar = !isFixed,
+    method = "BHHH" )
> all.equal( mlgFixBHHH, mlghFixBHHH )
[1] TRUE
> 
> ## BFGS method with fixed parameters
> mlFixBfgs <- maxLik( llf, start = startValFix, fixed = isFixed,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> mlFixBfgs3 <- maxLik( llf, start = startValFix, fixed = "mu",
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlFixBfgs, mlFixBfgs3 )
[1] TRUE
> mlFixBfgs4 <- maxLik( llf, start = startValFix, fixed = 1,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlFixBfgs, mlFixBfgs4 )
[1] TRUE
> print( mlFixBfgs )
Maximum Likelihood estimation
BFGS maximisation, 27 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825457 
> summary( mlFixBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 27 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12907  14.143 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFixBfgs )
   mu sigma 
FALSE  TRUE 
> AIC( mlFixBfgs )
[1] 406.1538
> coef( mlFixBfgs )
      mu    sigma 
1.000000 1.825457 
> condiNumber( mlFixBfgs )
sigma 	 1 
> hessian( mlFixBfgs )
              mu      sigma
mu    -29.984903  -5.940137
sigma  -5.940137 -60.026650
> logLik( mlFixBfgs )
[1] -202.0769
> maximType( mlFixBfgs )
[1] "BFGS maximisation"
> nIter( mlFixBfgs )
function 
      27 
> nObs( mlFixBfgs )
NULL
> nParam( mlFixBfgs )
[1] 2
> returnCode( mlFixBfgs )
[1] 0
> returnMessage( mlFixBfgs )
[1] "successful convergence "
> vcov( mlFixBfgs )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01665927
> logLik( summary( mlFixBfgs ) )
[1] -202.0769
> all.equal( mlghFix[ -c( 5, 6, 9, 10 ) ], mlFixBfgs[ -c( 5, 6, 9, 10, 11 ) ] )
[1] "Component 3: Mean relative difference: 6.455651e-08"
[2] "Component 4: Mean relative difference: 0.000410571" 
> mlIndFixBfgs <- maxLik( llfInd, start = startValFix, fixed = isFixed,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlFixBfgs[ -9 ], mlIndFixBfgs[ -9 ] )
[1] "Component 3: Mean relative difference: 9.428428e-08"
[2] "Component 4: Mean relative difference: 0.001115760" 
> mlIndFixBfgs3 <- maxLik( llfInd, start = startValFix, fixed = "mu",
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlIndFixBfgs, mlIndFixBfgs3 )
[1] TRUE
> mlIndFixBfgs4 <- maxLik( llfInd, start = startValFix, fixed = 1,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlIndFixBfgs, mlIndFixBfgs4 )
[1] TRUE
> 
> # with analytical gradients
> mlgFixBfgs <- maxLik( llf, gf, start = startValFix, fixed = isFixed,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> mlgFixBfgs3 <- maxLik( llf, gf, start = startValFix, fixed = "mu",
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlgFixBfgs, mlgFixBfgs3 )
[1] TRUE
> mlgFixBfgs4 <- maxLik( llf, gf, start = startValFix, fixed = 1,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlgFixBfgs, mlgFixBfgs4 )
[1] TRUE
> summary( mlgFixBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 29 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12908  14.142 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFixBfgs[ -9 ], mlgFixBfgs[ -9 ] )
[1] "Component 3: Mean relative difference: 9.37899e-08" 
[2] "Component 4: Mean relative difference: 0.0004106729"
> mlgIndFixBfgs <- maxLik( llfInd, gfInd, start = startValFix, fixed = isFixed,
+    method = "BFGS")
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlgFixBfgs, mlgIndFixBfgs )
[1] "Component 3: Mean relative difference: 1.653872e-08"
> mlgIndFixBfgs3 <- maxLik( llfInd, gfInd, start = startValFix, fixed = "mu",
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlgIndFixBfgs, mlgIndFixBfgs3 )
[1] TRUE
> mlgIndFixBfgs4 <- maxLik( llfInd, gfInd, start = startValFix, fixed = 1,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlgIndFixBfgs, mlgIndFixBfgs4 )
[1] TRUE
> 
> # with unused Hessians
> mlghFixBfgs <- maxLik( llf, gf, hf, start = startValFix, fixed = isFixed,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlgFixBfgs, mlghFixBfgs )
[1] TRUE
> mlghFixBfgs3 <- maxLik( llf, gf, hf, start = startValFix, fixed = "mu",
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlghFixBfgs, mlghFixBfgs3 )
[1] TRUE
> mlghFixBfgs4 <- maxLik( llf, gf, hf, start = startValFix, fixed = 1,
+    method = "BFGS" )
Warning message:
In log(sigma) : NaNs produced
> all.equal( mlghFixBfgs, mlghFixBfgs4 )
[1] TRUE
> 
> ## NM method with fixed parameters
> mlFixNm <- maxLik( llf, start = startValFix, fixed = isFixed,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> mlFixNm3 <- maxLik( llf, start = startValFix, fixed = "mu",
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlFixNm, mlFixNm3 )
[1] TRUE
> mlFixNm4 <- maxLik( llf, start = startValFix, fixed = 1,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlFixNm, mlFixNm4 )
[1] TRUE
> print( mlFixNm )
Maximum Likelihood estimation
Nelder-Mead maximisation, 28 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825391 
> summary( mlFixNm )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 28 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82539    0.12904  14.146 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFixNm )
   mu sigma 
FALSE  TRUE 
> AIC( mlFixNm )
[1] 406.1538
> coef( mlFixNm )
      mu    sigma 
1.000000 1.825391 
> condiNumber( mlFixNm )
sigma 	 1 
> hessian( mlFixNm )
              mu      sigma
mu    -30.041747  -5.968559
sigma  -5.968559 -60.055072
> logLik( mlFixNm )
[1] -202.0769
> maximType( mlFixNm )
[1] "Nelder-Mead maximisation"
> nIter( mlFixNm )
function 
      28 
> nObs( mlFixNm )
NULL
> nParam( mlFixNm )
[1] 2
> returnCode( mlFixNm )
[1] 0
> returnMessage( mlFixNm )
[1] "successful convergence "
> vcov( mlFixNm )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01665138
> logLik( summary( mlFixNm ) )
[1] -202.0769
> all.equal( mlFixBfgs[ -c( 9, 10 ) ], mlFixNm[ -c( 9, 10 ) ] )
[1] "Component 2: Mean relative difference: 3.661309e-05"
[2] "Component 3: Mean relative difference: 0.0008125891"
[3] "Component 4: Mean relative difference: 0.0013947"   
> mlIndFixNm <- maxLik( llfInd, start = startValFix, fixed = isFixed,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlFixNm, mlIndFixNm )
[1] "Component 3: Mean relative difference: 1.417023e-05"
> mlIndFixNm3 <- maxLik( llfInd, start = startValFix, fixed = "mu",
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlIndFixNm, mlIndFixNm3 )
[1] TRUE
> mlIndFixNm4 <- maxLik( llfInd, start = startValFix, fixed = 1,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlIndFixNm, mlIndFixNm4 )
[1] TRUE
> 
> # with analytical gradients
> mlgFixNm <- maxLik( llf, gf, start = startValFix, fixed = isFixed,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> mlgFixNm3 <- maxLik( llf, gf, start = startValFix, fixed = "mu",
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlgFixNm, mlgFixNm3 )
[1] TRUE
> mlgFixNm4 <- maxLik( llf, gf, start = startValFix, fixed = 1,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlgFixNm, mlgFixNm4 )
[1] TRUE
> summary( mlgFixNm )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 28 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82539    0.12907  14.143 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFixNm, mlgFixNm )
[1] "Component 4: Mean relative difference: 0.0009965241"
> mlgFixNm2 <- maxLik( llfInd, gfInd, start = startValFix, fixed = isFixed,
+    method = "NM")
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlgFixNm, mlgFixNm2 )
[1] TRUE
> 
> # with unused Hessians
> mlghFixNm <- maxLik( llf, gf, hf, start = startValFix, fixed = isFixed,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlgFixNm, mlghFixNm )
[1] TRUE
> mlghFixNm3 <- maxLik( llf, gf, hf, start = startValFix, fixed = "mu",
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlghFixNm, mlghFixNm3 )
[1] TRUE
> mlghFixNm4 <- maxLik( llf, gf, hf, start = startValFix, fixed = 1,
+    method = "NM" )
Warning message:
In optim(par = start[!fixed], fn = logLikFunc, control = control,  :
  one-diml optimization by Nelder-Mead is unreliable: use optimize
> all.equal( mlghFixNm, mlghFixNm4 )
[1] TRUE
> 
> ## SANN method with fixed parameters
> mlFixSann <- maxLik( llf, start = startValFix, fixed = isFixed,
+    method = "SANN" )
> mlFixSann3 <- maxLik( llf, start = startValFix, fixed = "mu",
+    method = "SANN" )
> all.equal( mlFixSann, mlFixSann3 )
[1] TRUE
> mlFixSann4 <- maxLik( llf, start = startValFix, fixed = 1,
+    method = "SANN" )
> all.equal( mlFixSann, mlFixSann4 )
[1] TRUE
> print( mlFixSann )
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825441 
> summary( mlFixSann )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu      1.0000     0.0000      NA        NA    
sigma   1.8254     0.1291  14.140 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFixSann )
   mu sigma 
FALSE  TRUE 
> AIC( mlFixSann )
[1] 406.1538
> coef( mlFixSann )
      mu    sigma 
1.000000 1.825441 
> condiNumber( mlFixSann )
sigma 	 1 
> hessian( mlFixSann )
              mu      sigma
mu    -29.984903  -5.940137
sigma  -5.940137 -59.998229
> logLik( mlFixSann )
[1] -202.0769
> maximType( mlFixSann )
[1] "SANN maximisation"
> nIter( mlFixSann )
function 
   10000 
> nObs( mlFixSann )
NULL
> nParam( mlFixSann )
[1] 2
> returnCode( mlFixSann )
[1] 0
> returnMessage( mlFixSann )
[1] "successful convergence "
> vcov( mlFixSann )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01666716
> logLik( summary( mlFixSann ) )
[1] -202.0769
> all.equal( mlFixBfgs[ -c( 9, 10 ) ], mlFixSann[ -c( 9, 10 ) ] )
[1] "Component 2: Mean relative difference: 8.939868e-06"
[2] "Component 3: Mean relative difference: 0.0001983898"
[3] "Component 4: Mean relative difference: 0.0004734848"
> mlIndFixSann <- maxLik( llfInd, start = startValFix, fixed = isFixed,
+    method = "SANN" )
> all.equal( mlFixSann, mlIndFixSann )
[1] "Component 4: Mean relative difference: 0.000947568"
> 
> # with analytical gradients
> mlgFixSann <- maxLik( llf, gf, start = startValFix, fixed = isFixed,
+    method = "SANN" )
> summary( mlgFixSann )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82544    0.12908  14.142 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFixSann, mlgFixSann )
[1] "Component 4: Mean relative difference: 0.0005683808"
> mlgFixSann2 <- maxLik( llfInd, gfInd, start = startValFix, fixed = isFixed,
+    method = "SANN")
> all.equal( mlgFixSann, mlgFixSann2 )
[1] TRUE
> 
> # with unused Hessians
> mlghFixSann <- maxLik( llf, gf, hf, start = startValFix, fixed = isFixed,
+    method = "SANN" )
> all.equal( mlgFixSann, mlghFixSann )
[1] TRUE
> 
> 
> ############### with parameter constraints ###############
> A <- matrix( -1, nrow = 1, ncol = 2 )
> 
> 
> ############### inequality constraints ###############
> inEq <- list( ineqA = A, ineqB = 2.5 )
> 
> ## NR method with inequality constraints
> try( maxLik( llf, start = startVal, constraints = inEq, method = "NR" ) )
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
> 
> ## BHHH method with inequality constraints
> try( maxLik( llf, start = startVal, constraints = inEq, method = "BHHH" ) )
Error in maxNR(fn, grad = gradient, hess = hess, start = start, iterlim = iterlim,  : 
  Inequality constraints not implemented for maxNR
> 
> ## BFGS method with inequality constraints
> mlBfgsInEq <- maxLik( llf, start = startVal, constraints = inEq,
+    method = "BFGS" )
> print( mlBfgsInEq )
Maximum Likelihood estimation
BFGS maximisation, 130 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5335 (2 free parameter(s))
Estimate(s): 0.8197184 1.680270 
> summary( mlBfgsInEq )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 130 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5335 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81972    0.17423  4.7049  2.54e-06 ***
sigma  1.68027    0.10715 15.6808 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.001450498 
--------------------------------------------
> activePar( mlBfgsInEq )
   mu sigma 
 TRUE  TRUE 
> AIC( mlBfgsInEq )
[1] 413.067
> coef( mlBfgsInEq )
       mu     sigma 
0.8197184 1.6802697 
> condiNumber( mlBfgsInEq )
mu 	 1 
sigma 	 3.608559 
> hessian( mlBfgsInEq )
             mu     sigma
mu    -35.41345 -15.20561
sigma -15.20561 -93.62111
> logLik( mlBfgsInEq )
[1] -204.5335
> maximType( mlBfgsInEq )
[1] "BFGS maximisation"
> nIter( mlBfgsInEq )
function 
     130 
> nObs( mlBfgsInEq )
NULL
> nParam( mlBfgsInEq )
[1] 2
> returnCode( mlBfgsInEq )
[1] 0
> returnMessage( mlBfgsInEq )
[1] "successful convergence "
> vcov( mlBfgsInEq )
                mu        sigma
mu     0.030354719 -0.004930108
sigma -0.004930108  0.011482082
> logLik( summary( mlBfgsInEq ) )
[1] -204.5335
> mlBfgsInEqInd <- maxLik( llfInd, start = startVal, constraints = inEq,
+    method = "BFGS" )
> summary( mlBfgsInEqInd )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 130 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5335 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81972    0.17430   4.703 2.564e-06 ***
sigma  1.68027    0.10712  15.685 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.001450499 
--------------------------------------------
> all.equal( mlBfgsInEq, mlBfgsInEqInd )
[1] "Component 3: Mean relative difference: 2.111204e-08"              
[2] "Component 4: Mean relative difference: 0.000660793"               
[3] "Component 11: Component 2: Mean relative difference: 7.994338e-07"
> 
> # with analytical gradients
> mlgBfgsInEq <- maxLik( llf, gf, start = startVal, constraints = inEq,
+    method = "BFGS" )
> all.equal( mlBfgsInEq, mlgBfgsInEq )
[1] "Component 2: Mean relative difference: 2.642639e-08"              
[2] "Component 3: Mean relative difference: 1.283066e-07"              
[3] "Component 4: Mean relative difference: 0.0005816419"              
[4] "Component 11: Component 2: Mean relative difference: 4.753044e-06"
> mlgBfgsInEqInd <- maxLik( llfInd, gfInd, start = startVal, constraints = inEq,
+    method = "BFGS" )
> all.equal( mlgBfgsInEqInd, mlgBfgsInEq )
[1] TRUE
> mlgBfgsInEqInd2 <- maxLik( llf, gfInd, start = startVal, constraints = inEq,
+    method = "BFGS" )
> all.equal( mlgBfgsInEqInd, mlgBfgsInEqInd2 )
[1] TRUE
> 
> # with unused Hessian
> mlghBfgsInEq <- maxLik( llf, gf, hf, start = startVal, constraints = inEq,
+    method = "BFGS" )
> all.equal( mlgBfgsInEq, mlghBfgsInEq )
[1] TRUE
> 
> ## NM method with inequality constraints
> mlNmInEq <- maxLik( llf, start = startVal, constraints = inEq, method = "NM" )
> print( mlNmInEq )
Maximum Likelihood estimation
Nelder-Mead maximisation, 103 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5335 (2 free parameter(s))
Estimate(s): 0.8197124 1.680277 
> summary( mlNmInEq )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 103 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5335 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81971    0.17430   4.703 2.564e-06 ***
sigma  1.68028    0.10712  15.685 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.001467752 
--------------------------------------------
> activePar( mlNmInEq )
   mu sigma 
 TRUE  TRUE 
> AIC( mlNmInEq )
[1] 413.067
> coef( mlNmInEq )
       mu     sigma 
0.8197124 1.6802770 
> condiNumber( mlNmInEq )
mu 	 1 
sigma 	 3.612777 
> hessian( mlNmInEq )
             mu     sigma
mu    -35.38503 -15.20561
sigma -15.20561 -93.67795
> logLik( mlNmInEq )
[1] -204.5335
> maximType( mlNmInEq )
[1] "Nelder-Mead maximisation"
> nIter( mlNmInEq )
function 
     103 
> nObs( mlNmInEq )
NULL
> nParam( mlNmInEq )
[1] 2
> returnCode( mlNmInEq )
[1] 0
> returnMessage( mlNmInEq )
[1] "successful convergence "
> vcov( mlNmInEq )
                mu        sigma
mu     0.030379546 -0.004931146
sigma -0.004931146  0.011475284
> logLik( summary( mlNmInEq ) )
[1] -204.5335
> all.equal( mlBfgsInEq, mlNmInEq )
[1] "Component 1: Mean relative difference: 8.099035e-08"            
[2] "Component 2: Mean relative difference: 5.284706e-06"            
[3] "Component 3: Mean relative difference: 2.695118e-05"            
[4] "Component 4: Mean relative difference: 0.000660793"             
[5] "Component 9: Mean relative difference: 0.2076923"               
[6] "Component 10: 1 string mismatch"                                
[7] "Component 11: Component 2: Mean relative difference: 0.01189469"
> mlNmInEqInd <- maxLik( llfInd, start = startVal, constraints = inEq,
+    method = "NM" )
> summary( mlNmInEqInd )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 103 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5335 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81971    0.17417  4.7064 2.522e-06 ***
sigma  1.68028    0.10713 15.6843 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.001467752 
--------------------------------------------
> all.equal( mlNmInEq, mlNmInEqInd )
[1] "Component 4: Mean relative difference: 0.001727862"
> 
> # with unused analytical gradients
> mlgNmInEq <- maxLik( llf, gf, start = startVal, constraints = inEq,
+    method = "NM" )
> all.equal( mlNmInEq, mlgNmInEq )
[1] "Component 4: Mean relative difference: 0.0004853686"
> 
> # with unused analytical gradients and Hessians
> mlghNmInEq <- maxLik( llf, gf, hf, start = startVal, constraints = inEq,
+    method = "NM" )
> all.equal( mlgNmInEq, mlghNmInEq )
[1] TRUE
> 
> ## SANN method with inequality constraints
> mlSannInEq <- maxLik( llf, start = startVal, constraints = inEq,
+    method = "SANN" )
> print( mlSannInEq )
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5407 (2 free parameter(s))
Estimate(s): 0.8296539 1.670165 
> summary( mlSannInEq )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5407 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.82965    0.17283  4.8005 1.583e-06 ***
sigma  1.67017    0.10553 15.8262 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.001042870 
--------------------------------------------
> activePar( mlSannInEq )
   mu sigma 
 TRUE  TRUE 
> AIC( mlSannInEq )
[1] 413.0814
> coef( mlSannInEq )
       mu     sigma 
0.8296539 1.6701655 
> condiNumber( mlSannInEq )
mu 	 1 
sigma 	 3.601167 
> hessian( mlSannInEq )
             mu     sigma
mu    -35.83978 -15.06351
sigma -15.06351 -96.12222
> logLik( mlSannInEq )
[1] -204.5407
> maximType( mlSannInEq )
[1] "SANN maximisation"
> nIter( mlSannInEq )
function 
   10000 
> nObs( mlSannInEq )
NULL
> nParam( mlSannInEq )
[1] 2
> returnCode( mlSannInEq )
[1] 0
> returnMessage( mlSannInEq )
[1] "successful convergence "
> vcov( mlSannInEq )
                mu        sigma
mu     0.029869343 -0.004680885
sigma -0.004680885  0.011136972
> logLik( summary( mlSannInEq ) )
[1] -204.5407
> all.equal( mlBfgsInEq, mlSannInEq )
[1] "Component 1: Mean relative difference: 3.521184e-05"           
[2] "Component 2: Mean relative difference: 0.008015937"            
[3] "Component 3: Mean relative difference: 0.03945641"             
[4] "Component 4: Mean relative difference: 0.02014260"             
[5] "Component 9: Mean relative difference: 75.92308"               
[6] "Component 10: 1 string mismatch"                               
[7] "Component 11: Component 2: Mean relative difference: 0.2810262"
> 
> # with unused analytical gradients
> mlgSannInEq <- maxLik( llf, gf, start = startVal, constraints = inEq,
+    method = "SANN" )
> all.equal( mlSannInEq, mlgSannInEq )
[1] "Component 4: Mean relative difference: 0.0002013720"
> 
> # with a user-specified function to generate a new candidate point
> mlSannInEqCand <- maxLik( llf, start = startVal, constraints = inEq,
+    method = "SANN", cand = function(x)c(rnorm(1,x[1]),rnorm(1,x[2])) )
There were 50 or more warnings (use warnings() to see the first 50)
> summary( mlSannInEqCand )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.6121 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81154    0.17482  4.6421 3.449e-06 ***
sigma  1.68239    0.10751 15.6485 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.0005162605 
--------------------------------------------
> all.equal( mlSannInEqCand, mlSannInEq )
[1] "Component 1: Mean relative difference: 0.0003490148"          
[2] "Component 2: Mean relative difference: 0.01216476"            
[3] "Component 3: Mean relative difference: 0.05195576"            
[4] "Component 4: Mean relative difference: 0.02652189"            
[5] "Component 11: Component 2: Mean relative difference: 1.020046"
> 
> ############### equality constraints ###############
> eqCon <- list( eqA = A, eqB = 2.5 )
> 
> ## NR method with equality constraints
> mlCon <- maxLik( llf, start = startVal, constraints = eqCon )
> print( mlCon )
Maximum Likelihood estimation
Newton-Raphson maximisation, 2 iterations
Return code 1: gradient close to zero
Log-Likelihood: -204.5333 (2 free parameter(s))
Estimate(s): 0.81975 1.680264 
> summary( mlCon )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 2 iterations
Return code 1: gradient close to zero
Log-Likelihood: -204.5333 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81975    0.17422  4.7051 2.537e-06 ***
sigma  1.68026    0.10714 15.6833 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
10  outer iterations, barrier value 2.069940e-10 
--------------------------------------------
> activePar( mlCon )
   mu sigma 
 TRUE  TRUE 
> AIC( mlCon )
[1] 413.0665
> coef( mlCon )
      mu    sigma 
0.819750 1.680264 
> condiNumber( mlCon )
mu 	 1 
sigma 	 3.609165 
> hessian( mlCon )
             mu     sigma
mu    -35.41345 -15.20561
sigma -15.20561 -93.64953
> logLik( mlCon )
[1] -204.5333
> maximType( mlCon )
[1] "Newton-Raphson maximisation"
> nIter( mlCon )
[1] 2
> nObs( mlCon )
NULL
> nParam( mlCon )
[1] 2
> returnCode( mlCon )
[1] 1
> returnMessage( mlCon )
[1] "gradient close to zero"
> vcov( mlCon )
                mu        sigma
mu     0.030354028 -0.004928499
sigma -0.004928499  0.011478337
> logLik( summary( mlCon ) )
[1] -204.5333
> mlConInd <- maxLik( llfInd, start = startVal, constraints = eqCon )
> summary( mlConInd )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 2 iterations
Return code 1: gradient close to zero
Log-Likelihood: -204.5333 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81975    0.17423  4.7051 2.537e-06 ***
sigma  1.68026    0.10715 15.6808 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
10  outer iterations, barrier value 2.069940e-10 
--------------------------------------------
> all.equal( mlCon, mlConInd )
[1] "Component 4: Mean relative difference: 0.0003034901"
> 
> # with analytical gradients
> mlgCon <- maxLik( llf, gf, start = startVal, constraints = eqCon )
> summary( mlgCon )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 1 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-Likelihood: -204.4556 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.84164    0.17238  4.8824 1.048e-06 ***
sigma  1.66976    0.10541 15.8402 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 2 
successive function values within tolerance limit 
7  outer iterations, barrier value 0.0001298936 
--------------------------------------------
> all.equal( mlCon[ -c( 5, 6, 7, 9 ) ], mlgCon[ -c( 5, 6, 7, 9 ) ] )
[1] "Component 1: Mean relative difference: 0.0003796631"             
[2] "Component 2: Mean relative difference: 0.01295649"               
[3] "Component 3: Mean relative difference: 0.0505588"                
[4] "Component 4: Mean relative difference: 0.02499657"               
[5] "Component 7: Component 2: Mean absolute difference: 0.0001298934"
[6] "Component 7: Component 3: Mean relative difference: 1"           
[7] "Component 7: Component 4: 1 string mismatch"                     
[8] "Component 7: Component 5: Mean relative difference: 0.3"         
> mlgConInd <- maxLik( llfInd, gfInd, start = startVal, constraints = eqCon )
> all.equal( mlConInd, mlgConInd )
 [1] "Component 1: Mean relative difference: 0.0003796631"              
 [2] "Component 2: Mean relative difference: 0.01295649"                
 [3] "Component 3: Mean relative difference: 0.0505588"                 
 [4] "Component 4: Mean relative difference: 0.02517928"                
 [5] "Component 5: Mean relative difference: 2"                         
 [6] "Component 6: 1 string mismatch"                                   
 [7] "Component 7: target is NULL, current is list"                     
 [8] "Component 9: Mean relative difference: 0.5"                       
 [9] "Component 11: Component 2: Mean absolute difference: 0.0001298934"
[10] "Component 11: Component 3: Mean relative difference: 1"           
[11] "Component 11: Component 4: 1 string mismatch"                     
[12] "Component 11: Component 5: Mean relative difference: 0.3"         
> all.equal( mlgCon, mlgConInd )
[1] TRUE
> 
> # with analytical gradients and Hessians
> mlghCon <- maxLik( llf, gf, hf, start = startVal, constraints = eqCon )
> all.equal( mlgCon, mlghCon )
[1] "Component 11: Component 2: Mean relative difference: 5.845209e-08"
> 
> ## BHHH method with equality constraints
> mlBhhhCon <- maxLik( llfInd, start = startVal, constraints = eqCon,
+    method = "BHHH" )
> print( mlBhhhCon )
Maximum Likelihood estimation
BHHH maximisation, 1 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-Likelihood: -207.4343 (2 free parameter(s))
Estimate(s): 0.8320184 1.660071 
> summary( mlBhhhCon )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 1 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-Likelihood: -207.4343 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.83202    0.15781  5.2723 1.347e-07 ***
sigma  1.66007    0.10198 16.2779 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 2 
successive function values within tolerance limit 
9  outer iterations, barrier value 6.258206e-05 
--------------------------------------------
> activePar( mlBhhhCon )
   mu sigma 
 TRUE  TRUE 
> AIC( mlBhhhCon )
[1] 418.8686
> coef( mlBhhhCon )
       mu     sigma 
0.8320184 1.6600707 
> condiNumber( mlBhhhCon )
mu 	 1 
sigma 	 3.786301 
> hessian( mlBhhhCon )
             mu      sigma
mu    -45.04842  -22.97396
sigma -22.97396 -107.86518
> logLik( mlBhhhCon )
[1] -207.4343
> maximType( mlBhhhCon )
[1] "BHHH maximisation"
> nIter( mlBhhhCon )
[1] 1
> nObs( mlBhhhCon )
NULL
> nParam( mlBhhhCon )
[1] 2
> returnCode( mlBhhhCon )
[1] 3
> returnMessage( mlBhhhCon )
[1] "Last step could not find a value above the current.\nBoundary of parameter space?  \nConsider switching to a more robust optimisation method temporarily."
> vcov( mlBhhhCon )
                mu        sigma
mu     0.024903342 -0.005304105
sigma -0.005304105  0.010400542
> logLik( summary( mlBhhhCon ) )
[1] -207.4343
> all.equal( mlCon[ -c( 5, 6, 7, 9, 10 ) ], mlBhhhCon[ -c( 5, 6, 7, 9, 10 ) ] )
[1] "Component 1: Mean relative difference: 0.01418374"               
[2] "Component 2: Mean relative difference: 0.01298475"               
[3] "Component 3: Mean relative difference: 0.07383964"               
[4] "Component 4: Mean relative difference: 0.2469823"                
[5] "Component 6: Component 2: Mean absolute difference: 6.258185e-05"
[6] "Component 6: Component 3: Mean relative difference: 1"           
[7] "Component 6: Component 4: 1 string mismatch"                     
[8] "Component 6: Component 5: Mean relative difference: 0.1"         
> 
> # with analytical gradients
> mlgBhhhCon <- maxLik( llf, gfInd, start = startVal, constraints = eqCon,
+    method = "BHHH" )
> summary( mlgBhhhCon )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 1 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-Likelihood: -207.4343 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.83202    0.15781  5.2723 1.347e-07 ***
sigma  1.66007    0.10198 16.2779 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 2 
successive function values within tolerance limit 
9  outer iterations, barrier value 6.258206e-05 
--------------------------------------------
> all.equal( mlBhhhCon, mlgBhhhCon )
[1] "Component 11: Component 2: Mean relative difference: 2.161053e-08"
> mlgBhhhConInd <- maxLik( llfInd, gfInd, start = startVal, constraints = eqCon,
+    method = "BHHH" )
> all.equal( mlgBhhhCon, mlgBhhhConInd )
[1] TRUE
> 
> # with analytical gradients and unused Hessians
> mlghBhhhCon <- maxLik( llf, gfInd, hf, start = startVal, constraints = eqCon,
+    method = "BHHH" )
> all.equal( mlgBhhhCon, mlghBhhhCon )
[1] TRUE
> 
> ## BFGS method with equality constraints
> mlBfgsCon <- maxLik( llf, start = startVal, constraints = eqCon,
+    method = "BFGS" )
There were 17 warnings (use warnings() to see them)
> print( mlBfgsCon )
Maximum Likelihood estimation
BFGS maximisation, 33 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5333 (2 free parameter(s))
Estimate(s): 0.81975 1.680264 
> summary( mlBfgsCon )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 33 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5333 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81975    0.17422  4.7052 2.536e-06 ***
sigma  1.68026    0.10712 15.6859 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
10  outer iterations, barrier value 2.069938e-10 
--------------------------------------------
> activePar( mlBfgsCon )
   mu sigma 
 TRUE  TRUE 
> AIC( mlBfgsCon )
[1] 413.0665
> coef( mlBfgsCon )
      mu    sigma 
0.819750 1.680264 
> condiNumber( mlBfgsCon )
mu 	 1 
sigma 	 3.609771 
> hessian( mlBfgsCon )
             mu     sigma
mu    -35.41345 -15.20561
sigma -15.20561 -93.67795
> logLik( mlBfgsCon )
[1] -204.5333
> maximType( mlBfgsCon )
[1] "BFGS maximisation"
> nIter( mlBfgsCon )
function 
      33 
> nObs( mlBfgsCon )
NULL
> nParam( mlBfgsCon )
[1] 2
> returnCode( mlBfgsCon )
[1] 0
> returnMessage( mlBfgsCon )
[1] "successful convergence "
> vcov( mlBfgsCon )
                mu        sigma
mu     0.030353338 -0.004926892
sigma -0.004926892  0.011474593
> logLik( summary( mlBfgsCon ) )
[1] -204.5333
> all.equal( mlBfgsCon[ -c( 5, 6, 9, 10 ) ], mlCon[ -c( 5, 6, 9, 10 ) ] )
[1] "Component 4: Mean relative difference: 0.0003033981"
> mlBfgsConInd <- maxLik( llfInd, start = startVal, constraints = eqCon,
+    method = "BFGS" )
There were 17 warnings (use warnings() to see them)
> summary( mlBfgsConInd )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 33 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5333 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81975    0.17424  4.7046 2.544e-06 ***
sigma  1.68026    0.10712 15.6862 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
10  outer iterations, barrier value 2.069938e-10 
--------------------------------------------
> all.equal( mlBfgsCon, mlBfgsConInd )
[1] "Component 4: Mean relative difference: 0.0006871278"
> 
> # with analytical gradients
> mlgBfgsCon <- maxLik( llf, gf, start = startVal, constraints = eqCon,
+    method = "BFGS" )
There were 22 warnings (use warnings() to see them)
> summary( mlgBfgsCon )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 30 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.8512 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81394    0.17336  4.6951 2.665e-06 ***
sigma  1.67031    0.10564 15.8107 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 2 
successive function values within tolerance limit 
7  outer iterations, barrier value 0.0002480587 
--------------------------------------------
> all.equal( mlBfgsCon, mlgBfgsCon )
[1] "Component 1: Mean relative difference: 0.001554449"               
[2] "Component 2: Mean relative difference: 0.00630567"                
[3] "Component 3: Mean relative difference: 0.05463436"                
[4] "Component 4: Mean relative difference: 0.02725743"                
[5] "Component 9: Mean relative difference: 0.0909091"                 
[6] "Component 11: Component 2: Mean absolute difference: 0.0002480585"
[7] "Component 11: Component 3: Mean relative difference: 1"           
[8] "Component 11: Component 4: 1 string mismatch"                     
[9] "Component 11: Component 5: Mean relative difference: 0.3"         
> mlgBfgsConInd <- maxLik( llfInd, gfInd, start = startVal, constraints = eqCon,
+    method = "BFGS" )
There were 22 warnings (use warnings() to see them)
> all.equal( mlgBfgsCon, mlgBfgsConInd )
[1] TRUE
> 
> # with analytical gradients and unused Hessians
> mlghBfgsCon <- maxLik( llf, gf, hf, start = startVal, constraints = eqCon,
+    method = "BFGS" )
There were 22 warnings (use warnings() to see them)
> all.equal( mlgBfgsCon, mlghBfgsCon )
[1] TRUE
> 
> ## NM method with equality constraints
> mlNmCon <- maxLik( llf, start = startVal, constraints = eqCon, method = "NM", SUMTTol=0)
> print( mlNmCon )
Maximum Likelihood estimation
Nelder-Mead maximisation, 57 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5333 (2 free parameter(s))
Estimate(s): 0.8196969 1.680319 
> summary( mlNmCon )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 57 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5333 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81970    0.17422  4.7048 2.541e-06 ***
sigma  1.68032    0.10714 15.6838 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
10  outer iterations, barrier value 2.417620e-10 
--------------------------------------------
> activePar( mlNmCon )
   mu sigma 
 TRUE  TRUE 
> AIC( mlNmCon )
[1] 413.0665
> coef( mlNmCon )
       mu     sigma 
0.8196969 1.6803187 
> condiNumber( mlNmCon )
mu 	 1 
sigma 	 3.609165 
> hessian( mlNmCon )
             mu     sigma
mu    -35.41345 -15.20561
sigma -15.20561 -93.64953
> logLik( mlNmCon )
[1] -204.5333
> maximType( mlNmCon )
[1] "Nelder-Mead maximisation"
> nIter( mlNmCon )
function 
      57 
> nObs( mlNmCon )
NULL
> nParam( mlNmCon )
[1] 2
> returnCode( mlNmCon )
[1] 0
> returnMessage( mlNmCon )
[1] "successful convergence "
> vcov( mlNmCon )
                mu        sigma
mu     0.030354028 -0.004928499
sigma -0.004928499  0.011478337
> logLik( summary( mlNmCon ) )
[1] -204.5333
> all.equal( mlNmCon[ -c( 5, 6, 9, 10 ) ], mlCon[ -c( 5, 6, 9, 10 ) ] )
[1] "Component 2: Mean relative difference: 4.298649e-05"
[2] "Component 3: Mean relative difference: 0.0002085726"
> mlNmConInd <- maxLik( llfInd, start = startVal, constraints = eqCon,
+    method = "NM", SUMTTol=0)
> summary( mlNmConInd )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 57 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5333 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81970    0.17422  4.7048 2.541e-06 ***
sigma  1.68032    0.10714 15.6838 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
10  outer iterations, barrier value 2.417620e-10 
--------------------------------------------
> all.equal( mlNmCon, mlNmConInd )
[1] TRUE
> 
> # with unused analytical gradients
> mlgNmCon <- maxLik( llf, gf, start = startVal, constraints = eqCon,
+    method = "NM", SUMTTol=0)
> all.equal( mlNmCon, mlgNmCon )
[1] "Component 4: Mean relative difference: 0.0003072491"
> mlgNmConInd <- maxLik( llfInd, gfInd, start = startVal, constraints = eqCon,
+    method = "NM", SUMTTol=0)
> all.equal( mlgNmCon, mlgNmConInd )
[1] TRUE
> 
> # with unused analytical gradients and Hessians
> mlghNmCon <- maxLik( llf, gf, hf, start = startVal, constraints = eqCon,
+    method = "NM", SUMTTol=0)
> all.equal( mlgNmCon, mlghNmCon )
[1] TRUE
> 
> ## SANN method with equality constraints
> mlSannCon <- maxLik( llf, start = startVal, constraints = eqCon,
+    method = "SANN", SUMTTol=0)
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
3: In log(sigma) : NaNs produced
> print( mlSannCon )
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5345 (2 free parameter(s))
Estimate(s): 0.8159587 1.684006 
> summary( mlSannCon )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -204.5345 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     0.81596    0.17474  4.6697 3.017e-06 ***
sigma  1.68401    0.10773 15.6321 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
9  outer iterations, barrier value 1.234006e-09 
--------------------------------------------
> activePar( mlSannCon )
   mu sigma 
 TRUE  TRUE 
> AIC( mlSannCon )
[1] 413.0691
> coef( mlSannCon )
       mu     sigma 
0.8159587 1.6840062 
> condiNumber( mlSannCon )
mu 	 1 
sigma 	 3.615891 
> hessian( mlSannCon )
             mu     sigma
mu    -35.27134 -15.29088
sigma -15.29088 -92.79688
> logLik( mlSannCon )
[1] -204.5345
> maximType( mlSannCon )
[1] "SANN maximisation"
> nIter( mlSannCon )
function 
   10000 
> nObs( mlSannCon )
NULL
> nParam( mlSannCon )
[1] 2
> returnCode( mlSannCon )
[1] 0
> returnMessage( mlSannCon )
[1] "successful convergence "
> vcov( mlSannCon )
               mu       sigma
mu     0.03053273 -0.00503112
sigma -0.00503112  0.01160524
> logLik( summary( mlSannCon ) )
[1] -204.5345
> all.equal( mlSannCon[ -c( 5, 6, 9, 10 ) ], mlBfgsCon[ -c( 5, 6, 9, 10 ) ] )
[1] "Component 1: Mean relative difference: 6.295965e-06"          
[2] "Component 2: Mean relative difference: 0.003013289"           
[3] "Component 3: Mean relative difference: 0.01450713"            
[4] "Component 4: Mean relative difference: 0.007524185"           
[5] "Component 7: Component 5: Mean relative difference: 0.1111111"
> 
> # with unused analytical gradients
> mlgSannCon <- maxLik( llf, gf, start = startVal, constraints = eqCon,
+    method = "SANN", SUMTTol=0)
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
3: In log(sigma) : NaNs produced
> all.equal( mlSannCon, mlgSannCon )
[1] "Component 4: Mean relative difference: 0.0002449429"
> 
> # with a user-specified function to generate a new candidate point
> mlSannConCand <- maxLik( llf, start = startVal, constraints = eqCon,
+    method = "SANN", cand = function(x)c(rnorm(1,x[1]),rnorm(1,x[2])) )
There were 50 or more warnings (use warnings() to see the first 50)
> summary( mlSannConCand )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5859 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18320    0.18210  6.4974 8.172e-11 ***
sigma  1.82156    0.12929 14.0895 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 2 
successive function values within tolerance limit 
2  outer iterations, barrier value 0.2547804 
--------------------------------------------
> all.equal( mlSannConCand, mlSannCon )
[1] "Component 1: Mean relative difference: 0.01462702"       
[2] "Component 2: Mean relative difference: 0.1679979"        
[3] "Component 3: Mean relative difference: 68.17022"         
[4] "Component 4: Mean relative difference: 0.763407"         
[5] "Component 11: Component 2: Mean relative difference: 1"  
[6] "Component 11: Component 3: Mean relative difference: 0.5"
[7] "Component 11: Component 4: 1 string mismatch"            
[8] "Component 11: Component 5: Mean relative difference: 3.5"
> 
> 
