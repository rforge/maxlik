
R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load the 'maxLik' package
> library(maxLik)
> 
> ## data to fit a normal distribution
> # set seed for pseudo random numbers
> set.seed( 123 )
> # generate a variable from normally distributed random numbers
> x <- rnorm( 100, 1, 2 )
> xSaved <- x
> 
> ## log likelihood function
> llf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    N <- length( x )
+    llValue <- -0.5 * N * log( 2 * pi ) - N * log( sigma ) -
+       0.5 * sum( ( x - mu )^2 / sigma^2 )
+    return( llValue )
+ }
> 
> ## log likelihood function (individual observations)
> llfInd <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    llValues <- -0.5 * log( 2 * pi ) - log( sigma ) -
+       0.5 * ( x - mu )^2 / sigma^2
+    return( llValues )
+ }
> 
> ## function to calculate analytical gradients
> gf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    N <- length( x )
+    llGrad <- c( sum( ( x - mu ) / sigma^2 ),
+       - N / sigma + sum( ( x - mu )^2 / sigma^3 ) )
+    return( llGrad )
+ }
> 
> ## function to calculate analytical gradients (individual observations)
> gfInd <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    llGrads <- cbind( ( x - mu ) / sigma^2,
+       - 1 / sigma + ( x - mu )^2 / sigma^3 )
+    return( llGrads )
+ }
> 
> ## function to calculate analytical Hessians
> hf <- function( param ) {
+    mu <- param[ 1 ]
+    sigma <- param[ 2 ]
+    N <- length( x )
+    llHess <- matrix( c(
+       N * ( - 1 / sigma^2 ),
+       sum( - 2 * ( x - mu ) / sigma^3 ),
+       sum( - 2 * ( x - mu ) / sigma^3 ),
+       N / sigma^2 + sum( - 3 * ( x - mu )^2 / sigma^4 ) ),
+       nrow = 2, ncol = 2 )
+    return( llHess )
+ }
> 
> # start values
> startVal <- c( mu = 0, sigma = 1 )
> 
> ## NR method
> ml <- maxLik( llf, start = startVal )
> print( ml )
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180812 1.816481 
> summary( ml )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18176  6.4965  8.22e-11 ***
sigma  1.81648    0.12846 14.1400 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( ml )
[1] TRUE TRUE
> AIC( ml )
[1] 407.1679
> coef( ml )
      mu    sigma 
1.180812 1.816481 
> condiNumber( ml )
mu 	 1 
sigma 	 1.668128 
> hessian( ml )
             mu     sigma
mu    -30.26912   0.00000
sigma   0.00000 -60.59508
> logLik( ml )
[1] -201.5839
> maximType( ml )
[1] "Newton-Raphson maximisation"
> nIter( ml )
[1] 7
> nObs( ml )
NULL
> nParam( ml )
[1] 2
> returnCode( ml )
[1] 1
> returnMessage( ml )
[1] "gradient close to zero"
> vcov( ml )
              mu      sigma
mu    0.03303697 0.00000000
sigma 0.00000000 0.01650299
> logLik( summary( ml ) )
[1] -201.5839
> mlInd <- maxLik( llfInd, start = startVal )
> summary( mlInd )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18168  6.4996 8.055e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( ml, mlInd )
[1] "Component 3: Mean relative difference: 0.3571429"  
[2] "Component 4: Mean relative difference: 0.001563966"
> 
> # with analytical gradients
> mlg <- maxLik( llf, gf, start = startVal )
> summary( mlg )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18165  6.5005 8.003e-11 ***
sigma  1.81648    0.12844 14.1421 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( ml, mlg )
[1] "Component 3: Mean relative difference: 1.037881"    
[2] "Component 4: Mean relative difference: 0.0006146669"
> mlgInd <- maxLik( llfInd, gfInd, start = startVal )
> all.equal( mlInd, mlgInd )
[1] "Component 3: Mean relative difference: 1.058926"   
[2] "Component 4: Mean relative difference: 0.001148752"
> all.equal( mlg, mlgInd )
[1] TRUE
> 
> # with analytical gradients and Hessians
> mlgh <- maxLik( llf, gf, hf, start = startVal )
> all.equal( mlg, mlgh )
[1] TRUE
> 
> 
> ## BHHH method
> mlBHHH <- try( maxLik( llf, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  if the gradients (argument 'grad') are not provided by the user, the BHHH method requires that the log-likelihood function (argument 'fn') returns a numeric vector, where each element must be the log-likelihood value corresponding to an individual (independent) observation
> x <- xSaved[1]
> try( maxLik( llfInd, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  if the gradients (argument 'grad') are not provided by the user, the BHHH method requires that the log-likelihood function (argument 'fn') returns a numeric vector, where each element must be the log-likelihood value corresponding to an individual (independent) observation
> x <- xSaved[1:2]
> try( maxLik( llfInd, start = startVal, method = "BHHH" ) )
Maximum Likelihood estimation
BHHH maximisation, 8 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -0.6227434 (2 free parameter(s))
Estimate(s): 0.2158296 0.3302446 
There were 25 warnings (use warnings() to see them)
> x <- xSaved
> mlBHHH <- maxLik( llfInd, start = startVal, method = "BHHH" )
> print( mlBHHH )
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180812 1.816480 
> summary( mlBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18183  6.4941 8.354e-11 ***
sigma  1.81648    0.13408 13.5473 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlBHHH )
[1] TRUE TRUE
> AIC( mlBHHH )
[1] 407.1679
> coef( mlBHHH )
      mu    sigma 
1.180812 1.816480 
> condiNumber( mlBHHH )
mu 	 1 
sigma 	 1.719018 
> hessian( mlBHHH )
              mu      sigma
mu    -30.306718  -1.833532
sigma  -1.833532 -55.732477
> logLik( mlBHHH )
[1] -201.5839
> maximType( mlBHHH )
[1] "BHHH maximisation"
> nIter( mlBHHH )
[1] 13
> nObs( mlBHHH )
NULL
> nParam( mlBHHH )
[1] 2
> returnCode( mlBHHH )
[1] 2
> returnMessage( mlBHHH )
[1] "successive function values within tolerance limit"
> vcov( mlBHHH )
                mu        sigma
mu     0.033061790 -0.001087693
sigma -0.001087693  0.017978643
> logLik( summary( mlBHHH ) )
[1] -201.5839
> all.equal( ml, mlBHHH )
[1] "Component 2: Mean relative difference: 2.538011e-07"
[2] "Component 3: Mean relative difference: 95.02288"    
[3] "Component 4: Mean relative difference: 0.0942865"   
[4] "Component 5: Mean relative difference: 1"           
[5] "Component 6: 1 string mismatch"                     
[6] "Component 9: Mean relative difference: 0.8571429"   
[7] "Component 10: 1 string mismatch"                    
> 
> # with analytical gradients
> mlgBHHH <- try( maxLik( llf, gf, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : Gradient is not a matrix.
the BHHH method requires that the gradient function
(argument 'grad') returns a numeric matrix,
where each row must correspond to the gradient(s)
of the log-likelihood function at an individual
(independent) observation and each column must
correspond to a parameter
> mlgBHHH <- try( maxLik( llfInd, gf, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : Gradient is not a matrix.
the BHHH method requires that the gradient function
(argument 'grad') returns a numeric matrix,
where each row must correspond to the gradient(s)
of the log-likelihood function at an individual
(independent) observation and each column must
correspond to a parameter
> x <- xSaved[1]
> try( maxLik( llf, gfInd, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  the matrix returned by the gradient function (argument 'grad') must have at least as many rows as the number of parameters (2), where each row must correspond to the gradients of the log-likelihood function of an individual (independent) observation:
 currently, there are (is) 2 parameter(s) but the gradient matrix has only 1 row(s)
> try( maxLik( llfInd, gfInd, start = startVal, method = "BHHH" ) )
Error in grad(theta, ...) : 
  the matrix returned by the gradient function (argument 'grad') must have at least as many rows as the number of parameters (2), where each row must correspond to the gradients of the log-likelihood function of an individual (independent) observation:
 currently, there are (is) 2 parameter(s) but the gradient matrix has only 1 row(s)
> x <- xSaved[1:2]
> try( maxLik( llf, gfInd, start = startVal, method = "BHHH" ) )
Maximum Likelihood estimation
BHHH maximisation, 8 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -0.6227434 (2 free parameter(s))
Estimate(s): 0.2158296 0.3302446 
There were 25 warnings (use warnings() to see them)
> try( maxLik( llfInd, gfInd, start = startVal, method = "BHHH" ) )
Maximum Likelihood estimation
BHHH maximisation, 8 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -0.6227434 (2 free parameter(s))
Estimate(s): 0.2158296 0.3302446 
There were 25 warnings (use warnings() to see them)
> x <- xSaved
> mlgBHHH <- maxLik( llfInd, gfInd, start = startVal, method = "BHHH" )
> summary( mlgBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18183  6.4941 8.354e-11 ***
sigma  1.81648    0.13408 13.5473 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBHHH, mlgBHHH )
[1] "Component 3: Mean relative difference: 0.0003213666"
> all.equal( mlg, mlgBHHH )
[1] "Component 2: Mean relative difference: 2.533978e-07"
[2] "Component 3: Mean absolute difference: 1.880678e-05"
[3] "Component 4: Mean relative difference: 0.09401655"  
[4] "Component 5: Mean relative difference: 1"           
[5] "Component 6: 1 string mismatch"                     
[6] "Component 9: Mean relative difference: 0.8571429"   
[7] "Component 10: 1 string mismatch"                    
> mlgBHHH2 <- maxLik( llf, gfInd, start = startVal, method = "BHHH" )
> all.equal( mlgBHHH, mlgBHHH2 )
[1] TRUE
> 
> # with unused Hessian
> mlghBHHH <- maxLik( llfInd, gfInd, hf, start = startVal, method = "BHHH" )
> all.equal( mlgBHHH, mlghBHHH )
[1] TRUE
> 
> 
> ## BFGS method
> mlBFGS <- maxLik( llf, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> print( mlBFGS )
Maximum Likelihood estimation
BFGS maximisation, 3615 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180811 1.816481 
> summary( mlBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3615 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18151  6.5057 7.736e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlBFGS )
[1] TRUE TRUE
> AIC( mlBFGS )
[1] 407.1679
> coef( mlBFGS )
      mu    sigma 
1.180811 1.816481 
> condiNumber( mlBFGS )
mu 	 1 
sigma 	 1.667864 
> hessian( mlBFGS )
                mu        sigma
mu    -30.35438567  -0.02842171
sigma  -0.02842171 -60.65192792
> logLik( mlBFGS )
[1] -201.5839
> maximType( mlBFGS )
[1] "BFGS maximisation"
> nIter( mlBFGS )
function gradient 
      36       15 
> nObs( mlBFGS )
NULL
> nParam( mlBFGS )
[1] 2
> returnCode( mlBFGS )
[1] 0
> returnMessage( mlBFGS )
[1] "successful convergence "
> vcov( mlBFGS )
                 mu         sigma
mu     3.294418e-02 -1.543776e-05
sigma -1.543776e-05  1.648753e-02
> logLik( summary( mlBFGS ) )
[1] -201.5839
> all.equal( ml, mlBFGS )
[1] "Length mismatch: comparison on first 10 components" 
[2] "Component 2: Mean relative difference: 6.480966e-07"
[3] "Component 3: Mean relative difference: 201.8571"    
[4] "Component 4: Mean relative difference: 0.002189553" 
[5] "Component 5: Mean relative difference: 1"           
[6] "Component 6: 1 string mismatch"                     
[7] "Component 9: names for current but not for target"  
[8] "Component 9: Numeric: lengths (1, 2) differ"        
[9] "Component 10: 1 string mismatch"                    
> mlIndBFGS <- maxLik( llfInd, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> summary( mlIndBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3615 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18176  6.4965  8.22e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBFGS, mlIndBFGS )
[1] "Component 3: Mean relative difference: 0.0006583278"
[2] "Component 4: Mean relative difference: 0.004672897" 
> # with individual log likelihood values
> mlIndBFGS <- maxLik( llfInd, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> summary( mlIndBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3615 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18176  6.4965  8.22e-11 ***
sigma  1.81648    0.12840 14.1466 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBFGS, mlIndBFGS )
[1] "Component 3: Mean relative difference: 0.0006583278"
[2] "Component 4: Mean relative difference: 0.004672897" 
> 
> # with analytical gradients
> mlgBFGS <- maxLik( llf, gf, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> summary( mlgBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3615 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18081    0.18165  6.5005 8.003e-11 ***
sigma  1.81648    0.12844 14.1421 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlBFGS, mlgBFGS )
[1] "Component 3: Mean relative difference: 0.0004838186"
[2] "Component 4: Mean relative difference: 0.001572110" 
> all.equal( mlg, mlgBFGS )
[1] "Length mismatch: comparison on first 10 components" 
[2] "Component 2: Mean relative difference: 6.483767e-07"
[3] "Component 3: Mean absolute difference: 4.02496e-05" 
[4] "Component 4: Mean relative difference: 2.472881e-06"
[5] "Component 5: Mean relative difference: 1"           
[6] "Component 6: 1 string mismatch"                     
[7] "Component 9: names for current but not for target"  
[8] "Component 9: Numeric: lengths (1, 2) differ"        
[9] "Component 10: 1 string mismatch"                    
> mlgIndBFGS <- maxLik( llfInd, gfInd, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> all.equal( mlgBFGS, mlgIndBFGS )
[1] TRUE
> 
> # with unused Hessian
> mlghBFGS <- maxLik( llf, gf, hf, start = startVal, method = "BFGS" )
Warning messages:
1: In log(sigma) : NaNs produced
2: In log(sigma) : NaNs produced
> all.equal( mlgBFGS, mlghBFGS )
[1] TRUE
> 
> 
> ## NM method
> mlNM <- maxLik( llf, start = startVal, method = "NM" )
> print( mlNM )
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 (2 free parameter(s))
Estimate(s): 1.180608 1.816636 
> summary( mlNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18168  6.4984 8.116e-11 ***
sigma  1.81664    0.12852 14.1346 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlNM )
[1] TRUE TRUE
> AIC( mlNM )
[1] 407.1679
> coef( mlNM )
      mu    sigma 
1.180608 1.816636 
> condiNumber( mlNM )
mu 	 1 
sigma 	 1.667866 
> hessian( mlNM )
                mu        sigma
mu    -30.29754225   0.02842171
sigma   0.02842171 -60.53824109
> logLik( mlNM )
[1] -201.5839
> maximType( mlNM )
[1] "Nelder-Mead maximisation"
> nIter( mlNM )
function 
      63 
> nObs( mlNM )
NULL
> nParam( mlNM )
[1] 2
> returnCode( mlNM )
[1] 0
> returnMessage( mlNM )
[1] "successful convergence "
> vcov( mlNM )
                mu        sigma
mu    3.300599e-02 1.549577e-05
sigma 1.549577e-05 1.651849e-02
> logLik( summary( mlNM ) )
[1] -201.5839
> all.equal( ml, mlNM )
[1] "Length mismatch: comparison on first 10 components" 
[2] "Component 2: Mean relative difference: 0.0001198380"
[3] "Component 3: Mean relative difference: 39189.07"    
[4] "Component 4: Mean relative difference: 0.001563966" 
[5] "Component 5: Mean relative difference: 1"           
[6] "Component 6: 1 string mismatch"                     
[7] "Component 9: names for current but not for target"  
[8] "Component 9: Mean relative difference: 8"           
[9] "Component 10: 1 string mismatch"                    
> # with individual log likelihood values
> mlIndNM <- maxLik( llfInd, start = startVal, method = "NM" )
> summary( mlIndNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18159  6.5015 7.953e-11 ***
sigma  1.81664    0.12843 14.1445 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlNM, mlIndNM )
[1] "Component 3: Mean relative difference: 4.60403e-06"
[2] "Component 4: Mean relative difference: 0.002501563"
> 
> # with unused analytical gradients
> mlgNM <- maxLik( llf, gf, start = startVal, method = "NM" )
> summary( mlgNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18166  6.4989 8.093e-11 ***
sigma  1.81664    0.12847 14.1403 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlNM, mlgNM )
[1] "Component 3: Mean relative difference: 1.839327e-06"
[2] "Component 4: Mean relative difference: 0.001359750" 
> # with individual log likelihood values and gradients
> mlgIndNM <- maxLik( llfInd, gfInd, start = startVal, method = "NM" )
> summary( mlgIndNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 63 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5839 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18061    0.18166  6.4989 8.093e-11 ***
sigma  1.81664    0.12847 14.1403 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlgNM, mlgIndNM )
[1] TRUE
> 
> # with unused analytical gradients and Hessian
> mlghNM <- maxLik( llf, gf, hf, start = startVal, method = "NM" )
> all.equal( mlgNM, mlghNM )
[1] TRUE
> 
> 
> ## SANN method
> set.seed( 345 )
> mlSANN <- maxLik( llf, start = startVal, method = "SANN" )
> print( mlSANN )
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 (2 free parameter(s))
Estimate(s): 1.181777 1.816519 
> summary( mlSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18176  6.5018 7.935e-11 ***
sigma  1.81652    0.12849 14.1370 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlSANN )
[1] TRUE TRUE
> AIC( mlSANN )
[1] 407.1679
> coef( mlSANN )
      mu    sigma 
1.181777 1.816519 
> condiNumber( mlSANN )
mu 	 1 
sigma 	 1.672721 
> hessian( mlSANN )
                mu        sigma
mu    -30.26912054   0.05684342
sigma   0.05684342 -60.56666280
> logLik( mlSANN )
[1] -201.5840
> maximType( mlSANN )
[1] "SANN maximisation"
> nIter( mlSANN )
function 
   10000 
> nObs( mlSANN )
NULL
> nParam( mlSANN )
[1] 2
> returnCode( mlSANN )
[1] 0
> returnMessage( mlSANN )
[1] "successful convergence "
> vcov( mlSANN )
                mu        sigma
mu    3.303703e-02 3.100613e-05
sigma 3.100613e-05 1.651076e-02
> logLik( summary( mlSANN ) )
[1] -201.5840
> all.equal( ml, mlSANN )
 [1] "Length mismatch: comparison on first 10 components" 
 [2] "Component 1: Mean relative difference: 7.028622e-08"
 [3] "Component 2: Mean relative difference: 0.0003349168"
 [4] "Component 3: Mean relative difference: 79340.21"    
 [5] "Component 4: Mean relative difference: 0.002345216" 
 [6] "Component 5: Mean relative difference: 1"           
 [7] "Component 6: 1 string mismatch"                     
 [8] "Component 9: names for current but not for target"  
 [9] "Component 9: Mean relative difference: 1427.571"    
[10] "Component 10: 1 string mismatch"                    
> # with individual log likelihood values
> mlIndSANN <- maxLik( llfInd, start = startVal, method = "SANN" )
> summary( mlIndSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18159  6.5079  7.62e-11 ***
sigma  1.81652    0.12843 14.1436 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlSANN, mlIndSANN )
[1] "Component 4: Mean relative difference: 0.001875"
> 
> # with unused analytical gradients
> set.seed( 345 )
> mlgSANN <- maxLik( llf, gf, start = startVal, method = "SANN" )
> summary( mlgSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18165  6.5057 7.732e-11 ***
sigma  1.81652    0.12845 14.1417 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlSANN, mlgSANN )
[1] "Component 3: Mean relative difference: 7.284589e-07"
[2] "Component 4: Mean relative difference: 0.001383963" 
> # with individual log likelihood values and gradients
> mlgIndSANN <- maxLik( llfInd, gfInd, start = startVal, method = "SANN" )
> summary( mlgIndSANN )
--------------------------------------------
Maximum Likelihood estimation
SANN maximisation, 10000 iterations
Return code 0: successful convergence 
Log-Likelihood: -201.5840 
2  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.18178    0.18165  6.5057 7.732e-11 ***
sigma  1.81652    0.12845 14.1417 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlgSANN, mlgIndSANN )
[1] TRUE
> 
> # with unused analytical gradients and Hessian
> set.seed( 345 )
> mlghSANN <- maxLik( llf, gf, hf, start = startVal, method = "SANN" )
> all.equal( mlgSANN, mlghSANN )
[1] TRUE
> 
> 
> ############### with fixed parameters ###############
> # start values
> startValFix <- c( mu = 1, sigma = 1 )
> 
> # fix mu (the mean ) at its start value
> isFixed <- c( TRUE, FALSE )
> 
> ## NR method
> mlFix <- maxLik( llf, start = startValFix, activePar = !isFixed )
> print( mlFix )
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825457 
> summary( mlFix )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12907  14.143 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFix )
[1] FALSE  TRUE
> AIC( mlFix )
[1] 406.1538
> coef( mlFix )
      mu    sigma 
1.000000 1.825457 
> condiNumber( mlFix )
sigma 	 1 
> hessian( mlFix )
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> logLik( mlFix )
[1] -202.0769
> maximType( mlFix )
[1] "Newton-Raphson maximisation"
> nIter( mlFix )
[1] 7
> nObs( mlFix )
NULL
> nParam( mlFix )
[1] 2
> returnCode( mlFix )
[1] 1
> returnMessage( mlFix )
[1] "gradient close to zero"
> vcov( mlFix )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01665927
> logLik( summary( mlFix ) )
[1] -202.0769
> mlIndFix <- maxLik( llfInd, start = startValFix, activePar = !isFixed )
> summary( mlIndFix )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12907  14.143 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFix, mlIndFix )
[1] "Component 3: Mean relative difference: 1"
> mlFix[[3]]
          mu        sigma 
          NA 2.842171e-08 
> mlIndFix[[3]]
   mu sigma 
   NA     0 
> 
> # with analytical gradients
> mlgFix <- maxLik( llf, gf, start = startValFix, activePar = !isFixed )
> summary( mlgFix )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 7 iterations
Return code 1: gradient close to zero
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.12908  14.142 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFix, mlgFix )
[1] "Component 3: 'is.NA' value mismatch: 0 in current 1 in target"
[2] "Component 4: 'is.NA' value mismatch: 2 in current 3 in target"
> mlFix[[3]]
          mu        sigma 
          NA 2.842171e-08 
> mlgFix[[3]]
          mu        sigma 
5.426045e+00 5.542233e-13 
> mlFix[[4]]
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> mlgFix[[4]]
      mu     sigma
mu    NA  -5.94486
sigma NA -60.01870
> mlgIndFix <- maxLik( llfInd, gfInd, start = startValFix, activePar = !isFixed )
> all.equal( mlIndFix, mlgIndFix )
[1] "Component 3: 'is.NA' value mismatch: 0 in current 1 in target"
[2] "Component 4: 'is.NA' value mismatch: 2 in current 3 in target"
> mlIndFix[[3]]
   mu sigma 
   NA     0 
> mlgIndFix[[3]]
          mu        sigma 
5.426045e+00 5.539458e-13 
> mlIndFix[[4]]
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> mlgIndFix[[4]]
      mu     sigma
mu    NA  -5.94486
sigma NA -60.01870
> all.equal( mlgFix, mlgIndFix )
[1] TRUE
> 
> # with analytical gradients and Hessians
> mlghFix <- maxLik( llf, gf, hf, start = startValFix, activePar = !isFixed )
> all.equal( mlgFix, mlghFix )
[1] "Component 4: 'is.NA' value mismatch: 0 in current 2 in target"
> mlgFix[[4]]
      mu     sigma
mu    NA  -5.94486
sigma NA -60.01870
> mlghFix[[4]]
             mu     sigma
mu    -30.00935  -5.94486
sigma  -5.94486 -60.01870
> 
> ## BHHH method
> mlFixBHHH <- maxLik( llfInd, start = startValFix, activePar = !isFixed,
+    method = "BHHH" )
> print( mlFixBHHH )
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -202.0769 (1 free parameter(s))
Estimate(s): 1 1.825458 
> summary( mlFixBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.13365  13.658 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> activePar( mlFixBHHH )
[1] FALSE  TRUE
> AIC( mlFixBHHH )
[1] 406.1538
> coef( mlFixBHHH )
      mu    sigma 
1.000000 1.825458 
> condiNumber( mlFixBHHH )
sigma 	 1 
> hessian( mlFixBHHH )
             mu     sigma
mu    -30.00934  -7.67543
sigma  -7.67543 -55.98293
> logLik( mlFixBHHH )
[1] -202.0769
> maximType( mlFixBHHH )
[1] "BHHH maximisation"
> nIter( mlFixBHHH )
[1] 10
> nObs( mlFixBHHH )
NULL
> nParam( mlFixBHHH )
[1] 2
> returnCode( mlFixBHHH )
[1] 2
> returnMessage( mlFixBHHH )
[1] "successive function values within tolerance limit"
> vcov( mlFixBHHH )
      mu      sigma
mu     0 0.00000000
sigma  0 0.01786259
> logLik( summary( mlFixBHHH ) )
[1] -202.0769
> all.equal( mlFix[ -c( 5, 6, 9, 10 ) ], mlFixBHHH[ -c( 5, 6, 9, 10 ) ] )
[1] "Component 2: Mean relative difference: 7.729473e-08"          
[2] "Component 3: 'is.NA' value mismatch: 0 in current 1 in target"
[3] "Component 4: 'is.NA' value mismatch: 0 in current 3 in target"
> mlFix[[ 3 ]]
          mu        sigma 
          NA 2.842171e-08 
> mlFixBHHH[[ 3 ]]
           mu         sigma 
 5.426044e+00 -8.473666e-06 
> mlFix[[ 4 ]]
      mu     sigma
mu    NA        NA
sigma NA -60.02665
> mlFixBHHH[[ 4 ]]
             mu     sigma
mu    -30.00934  -7.67543
sigma  -7.67543 -55.98293
> 
> # with analytical gradients
> mlgFixBHHH <- maxLik( llfInd, gfInd, start = startValFix, activePar = !isFixed,
+    method = "BHHH" )
> summary( mlgFixBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -202.0769 
1  free parameters
Estimates:
      Estimate Std. error t value   Pr(> t)    
mu     1.00000    0.00000      NA        NA    
sigma  1.82546    0.13365  13.658 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( mlFixBHHH, mlgFixBHHH )
[1] TRUE
> mlgFixBHHH2 <- maxLik( llf, gfInd, start = startValFix, activePar = !isFixed,
+    method = "BHHH")
> all.equal( mlgFixBHHH, mlgFixBHHH2 )
[1] TRUE
> 
> # with unused Hessians
> mlghFixBHHH <- maxLik( llfInd, gfInd, hf, start = startValFix, activePar = !isFixed,
+    method = "BHHH" )
> all.equal( mlgFixBHHH, mlghFixBHHH )
[1] TRUE
> 
