
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### Various tests for constrained optimization
> ###
> options(digits=4)
> 
> logLikMix <- function(param) {
+    rho <- param[1]
+    if(rho < 0 || rho > 1)
+        return(NA)
+    mu1 <- param[2]
+    mu2 <- param[3]
+    ll <- log(rho*dnorm(x - mu1) + (1 - rho)*dnorm(x - mu2))
+    ll <- sum(ll)
+    ll
+ }
> 
> gradLikMix <- function(param) {
+    rho <- param[1]
+    if(rho < 0 || rho > 1)
+        return(NA)
+    mu1 <- param[2]
+    mu2 <- param[3]
+    f1 <- dnorm(x - mu1)
+    f2 <- dnorm(x - mu2)
+    L <- rho*f1 + (1 - rho)*f2
+    g <- matrix(0, length(x), 3)
+    g[,1] <- (f1 - f2)/L
+    g[,2] <- rho*(x - mu1)*f1/L
+    g[,3] <- (1 - rho)*(x - mu2)*f2/L
+    colSums(g)
+    g
+ }
> 
> logLikMixInd <- function(param) {
+    rho <- param[1]
+    if(rho < 0 || rho > 1)
+        return(NA)
+    mu1 <- param[2]
+    mu2 <- param[3]
+    ll <- log(rho*dnorm(x - mu1) + (1 - rho)*dnorm(x - mu2))
+    ll <- sum(ll)
+    ll
+ }
> 
> gradLikMixInd <- function(param) {
+    rho <- param[1]
+    if(rho < 0 || rho > 1)
+        return(NA)
+    mu1 <- param[2]
+    mu2 <- param[3]
+    f1 <- dnorm(x - mu1)
+    f2 <- dnorm(x - mu2)
+    L <- rho*f1 + (1 - rho)*f2
+    g <- matrix(0, length(x), 3)
+    g[,1] <- (f1 - f2)/L
+    g[,2] <- rho*(x - mu1)*f1/L
+    g[,3] <- (1 - rho)*(x - mu2)*f2/L
+    colSums(g)
+    g
+ }
> 
> hessLikMix <- function(param) {
+    rho <- param[1]
+    if(rho < 0 || rho > 1)
+        return(NA)
+    mu1 <- param[2]
+    mu2 <- param[3]
+    f1 <- dnorm(x - mu1)
+    f2 <- dnorm(x - mu2)
+    L <- rho*f1 + (1 - rho)*f2
+    dldrho <- (f1 - f2)/L
+    dldmu1 <- rho*(x - mu1)*f1/L
+    dldmu2 <- (1 - rho)*(x - mu2)*f2/L
+    h <- matrix(0, 3, 3)
+    h[1,1] <- -sum(dldrho*(f1 - f2)/L)
+    h[2,1] <- h[1,2] <- sum((x - mu1)*f1/L - dldmu1*dldrho)
+    h[3,1] <- h[1,3] <- sum(-(x - mu2)*f2/L - dldmu2*dldrho)
+    h[2,2] <- sum(rho*(-f1 + (x - mu1)^2*f1)/L - dldmu1^2)
+    h[2,3] <- h[3,2] <- -sum(dldmu1*dldmu2)
+    h[3,3] <- sum((1 - rho)*(-f2 + (x - mu2)^2*f2)/L - dldmu2^2)
+    h
+ }
> ### --------------------------
> library(maxLik)
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> ## mixed normal
> set.seed(1)
> N <- 100
> x <- c(rnorm(N, mean=-1), rnorm(N, mean=1))
> 
> ## ---------- INEQUALITY CONSTRAINTS -----------
> ## First test inequality constraints, numeric/analytical gradients
> ## Inequality constraints: x + y + z < 0.5
> A <- matrix(c(-1, 0, 0,
+               0, -1, 0,
+               0, 0, 1), 3, 3, byrow=TRUE)
> B <- rep(0.5, 3)
> start <- c(0.4, 0, 0.9)
> ineqCon <- list(ineqA=A, ineqB=B)
> ## analytic gradient
> cat("Inequality constraints, analytic gradient & Hessian\n")
Inequality constraints, analytic gradient & Hessian
> a <- maxLik(logLikMix, grad=gradLikMix, hess=hessLikMix,
+             start=start,
+             constraints=ineqCon)
> print(coef(a), digits=3)
[1]  0.500 -0.775  0.876
> ## No analytic gradient
> cat("Inequality constraints, numeric gradient & Hessian\n")
Inequality constraints, numeric gradient & Hessian
> a <- maxLik(logLikMix, 
+             start=start,
+             constraints=ineqCon)
> print(coef(a), digits=3)
[1]  0.50 -0.63  1.23
> ## NR method with inequality constraints
> try( maxLik(logLikMix, start = start, constraints = ineqCon, method = "NR" ) )
Error in maxRoutine(fn = logLik, grad = grad, hess = hess, start = start,  : 
  Inequality constraints not implemented for maxNR
> 
> ## BHHH method with inequality constraints
> try( maxLik(logLikMix, start = start, constraints = ineqCon, method = "BHHH" ) )
Error in maxNR(fn = fn, grad = grad, hess = hess, start = start, finalHessian = finalHessian,  : 
  Inequality constraints not implemented for maxNR
> 
> 
> ## ---------- EQUALITY CONSTRAINTS -----------------
> cat("Test for equality constraints y + 2z = 0\n")
Test for equality constraints y + 2z = 0
> A <- matrix(c(0, 1, 2), 1, 3)
> B <- 0
> eqCon <- list( eqA = A, eqB = B )
> ## default, numeric gradient
> mlEq <- maxLik(logLikMix, start = start, constraints = eqCon )
> print(summary(mlEq))
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 2 iterations
Return code 1: gradient close to zero
Log-Likelihood: -339.8 
3  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    0.343      0.140    2.45 0.01444 *  
[2,]   -1.100      0.318   -3.46 0.00054 ***
[3,]    0.550      0.216    2.55 0.01075 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on SUMT 
Return code: 1 
penalty close to zero 
9  outer iterations, barrier value 2.999e-09 
--------------------------------------------
> ## default, individual likelihood
> mlEqInd <- maxLik(logLikMixInd, start = start, constraints = eqCon )
> all.equal(coef(mlEq), coef(mlEqInd))
[1] TRUE
> all.equal(stdEr(mlEq), stdEr(mlEqInd))
[1] TRUE
> ## default, analytic gradient
> mlEqG <- maxLik(logLikMix, grad=gradLikMix,
+                   start = start, constraints = eqCon )
> all.equal(coef(mlEq), coef(mlEqG), tolerance=1e-6)
[1] TRUE
> ## default, analytic gradient, individual likelihood
> mlEqGInd <- maxLik(logLikMixInd, grad=gradLikMixInd,
+                      start = start, constraints = eqCon )
> all.equal(coef(mlEqG), coef(mlEqGInd), tolerance=1e-6)
[1] TRUE
> all.equal(stdEr(mlEqGInd), stdEr(mlEqGInd), tolerance=1e-6)
[1] TRUE
> ## default, analytic Hessian
> mlEqH <- maxLik(logLikMix, grad=gradLikMix, hess=hessLikMix,
+                   start=start,
+                   constraints=eqCon)
> all.equal(coef(mlEqG), coef(mlEqH), toleranec=1e-6)
[1] TRUE
> all.equal(stdEr(mlEqG), stdEr(mlEqH))
[1] TRUE
> 
> 
> ## BFGS, numeric gradient
> a <- maxLik(logLikMix, 
+             start=start, method="bfgs",
+             constraints=eqCon,
+             SUMTRho0=1)
> print(coef(a))
[1]  0.3425 -1.0996  0.5498
> ## BHHH, analytic gradient (numeric does not converge?)
> try( maxLik(logLikMix, gradLikMix,
+             start=start, method="bhhh",
+             constraints=eqCon,
+             SUMTRho0=1) )
Maximum Likelihood estimation
BHHH maximisation, 6 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -339.8 (3 free parameter(s))
Estimate(s): 0.3402 -1.103 0.5514 
> 
> 
> ### ------------------ Now test additional parameters for the function ----
> logLikMix2 <- function(param, rho) {
+    mu1 <- param[1]
+    mu2 <- param[2]
+    ll <- log(rho*dnorm(x - mu1) + (1 - rho)*dnorm(x - mu2))
+ #   ll <- sum(ll)
+    ll
+ }
> 
> gradLikMix2 <- function(param, rho) {
+    mu1 <- param[1]
+    mu2 <- param[2]
+    f1 <- dnorm(x - mu1)
+    f2 <- dnorm(x - mu2)
+    L <- rho*f1 + (1 - rho)*f2
+    g <- matrix(0, length(x), 2)
+    g[,1] <- rho*(x - mu1)*f1/L
+    g[,2] <- (1 - rho)*(x - mu2)*f2/L
+ #   colSums(g)
+    g
+ }
> 
> hessLikMix2 <- function(param, rho) {
+    mu1 <- param[1]
+    mu2 <- param[2]
+    f1 <- dnorm(x - mu1)
+    f2 <- dnorm(x - mu2)
+    L <- rho*f1 + (1 - rho)*f2
+    dldrho <- (f1 - f2)/L
+    dldmu1 <- rho*(x - mu1)*f1/L
+    dldmu2 <- (1 - rho)*(x - mu2)*f2/L
+    h <- matrix(0, 2, 2)
+    h[1,1] <- sum(rho*(-f1 + (x - mu1)^2*f1)/L - dldmu1^2)
+    h[1,2] <- h[2,1] <- -sum(dldmu1*dldmu2)
+    h[2,2] <- sum((1 - rho)*(-f2 + (x - mu2)^2*f2)/L - dldmu2^2)
+    h
+ }
> 
> ## ---------- Equality constraints & extra parameters ------------
> A <- matrix(c(1, 2), 1, 2)
> B <- 0
> start <- c(0, 1)
> ## We run only a few iterations as we want to test correct handling
> ## of parameters, not the final value.  We also avoid any
> ## debug information
> iterlim <- 3
> cat("Test for extra parameters for the function\n")
Test for extra parameters for the function
> ## NR, numeric gradient
> cat("Newton-Raphson, numeric gradient\n")
Newton-Raphson, numeric gradient
> a <- maxLik(logLikMix2,
+             start=start, method="nr",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -0.9986  0.4993
> ## NR, numeric hessian
> a <- maxLik(logLikMix2, gradLikMix2, 
+             start=start, method="nr",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -0.9986  0.4993
> ## nr, analytic hessian
> a <- maxLik(logLikMix2, gradLikMix2, hessLikMix2,
+             start=start, method="nr",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -0.9986  0.4993
> ## BHHH
> cat("BHHH, analytic gradient, numeric Hessian\n")
BHHH, analytic gradient, numeric Hessian
> a <- maxLik(logLikMix2, gradLikMix2, 
+             start=start, method="bhhh",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -1.0065  0.5033
> ## BHHH, analytic
> a <- maxLik(logLikMix2, gradLikMix2, 
+             start=start, method="bhhh",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -1.0065  0.5033
> ## bfgs, no analytic gradient
> a <- maxLik(logLikMix2, 
+             start=start, method="bfgs",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -1.0163  0.5082
> ## bfgs, analytic gradient
> a <- maxLik(logLikMix2, 
+             start=start, method="bfgs",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
> print(coef(a))
[1] -1.0163  0.5082
> ## SANN, analytic gradient
> a <- maxLik(logLikMix2, gradLikMix2,
+             start=start, method="SANN",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
Warning message:
In (function (fn, grad = NULL, hess = NULL, start, maxRoutine, constraints,  :
  problem in imposing equality constraints: the constraints are not satisfied (barrier value = 0.00173566161904632). Try setting 'SUMTTol' to 0
> print(coef(a))
[1] -1.1210  0.5396
> ## NM, numeric
> a <- maxLik(logLikMix2, 
+             start=start, method="nm",
+             constraints=list(eqA=A, eqB=B),
+             iterlim=iterlim, SUMTRho0=1, rho=0.5)
Warning message:
In (function (fn, grad = NULL, hess = NULL, start, maxRoutine, constraints,  :
  problem in imposing equality constraints: the constraints are not satisfied (barrier value = 4). Try setting 'SUMTTol' to 0
> print(coef(a))
[1] 0 1
> f <- function(theta) exp(-theta %*% theta)
> ## NR, multiple constraints
> A <- matrix(c(1, 0, 1,
+               1, 1, 0), 2, 3, byrow=TRUE)
> B <- c(-1, -1)
> cat("NR, multiple constraints\n")
NR, multiple constraints
> a <- maxNR(f, start=c(1,1.1,2), constraints=list(eqA=A, eqB=B))
> print(coef(a))
[1] 0.6667 0.3333 0.3333
> ## Error handling for equality constraints
> A <- matrix(c(1, 1), 1, 2)
> B <- -1
> cat("Error handling: ncol(A) != lengths(start)\n")
Error handling: ncol(A) != lengths(start)
> try(a <- maxNR(f, start=c(1, 2, 3), constraints=list(eqA=A, eqB=B)))
Error in sumt(fn = function (theta)  : 
  Equality constraint matrix A must have the same number
of columns as the parameter length (currently 2 and 3)
>                            # ncol(A) != length(start)
> A <- matrix(c(1, 1), 1, 2)
> B <- c(-1, 2)
> try(a <- maxNR(f, start=c(1, 2), constraints=list(eqA=A, eqB=B)))
Error in sumt(fn = function (theta)  : 
  Equality constraint matrix A must have the same number
of rows as the matrix B (currently 1 and 2)
>                            # nrow(A) != nrow(B)
> ##                           
> ## -------------- inequality constraints & extra paramters ----------------
> ##
> A <- matrix(c(-1, 0,
+               0,  1), 2,2, byrow=TRUE)
> B <- c(1,1)
> start <- c(0.8, 0.9)
> ##
> a <- maxLik(logLikMix2, gradLikMix2,
+             start=start, method="bfgs",
+             constraints=list(ineqA=A, ineqB=B),
+             rho=0.5)
> print( summary( a ), digits = 2 )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximization, 23 iterations
Return code 0: successful convergence 
Log-Likelihood: -337.6 
2  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    -0.77       0.12    -6.3   4e-10 ***
[2,]     0.88       0.13     6.7   2e-11 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -3.407e-05 
--------------------------------------------
> ##
> a <- maxLik(logLikMix2, 
+             start=start, method="bfgs",
+             constraints=list(ineqA=A, ineqB=B),
+             rho=0.5)
> print( summary( a ), digits = 2 )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximization, 23 iterations
Return code 0: successful convergence 
Log-Likelihood: -337.6 
2  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    -0.77       0.12    -6.3   4e-10 ***
[2,]     0.88       0.13     6.7   2e-11 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -3.407e-05 
--------------------------------------------
> ##
> a <- maxLik(logLikMix2, gradLikMix2,
+             start=start, method="nm",
+             constraints=list(ineqA=A, ineqB=B),
+             rho=0.5)
> print( summary( a ), digits = 2 )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximization, 59 iterations
Return code 0: successful convergence 
Log-Likelihood: -337.6 
2  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    -0.77       0.12    -6.3   4e-10 ***
[2,]     0.88       0.13     6.7   2e-11 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Warning: constrained likelihood estimation. Inference is probably wrong
Constrained optimization based on constrOptim 
1  outer iterations, barrier value -3.408e-05 
--------------------------------------------
> ## ---------- test vector B for inequality  --------------
> B1 <- c(1,-2)
> a <- maxLik(logLikMix2, gradLikMix2,
+             start=c(0.5, 2.5), method="bfgs",
+             constraints=list(ineqA=A, ineqB=B1),
+             rho=0.5)
> coef(a)
[1] -0.5894  2.0000
>                            # components should be larger than
>                            # (-1, -2)
> 
> ##
> ## ----  ERROR HANDLING: insert wrong A and B forms ----
> ##
> A2 <- c(-1, 0, 0, 1)
> try(maxLik(logLikMix2, gradLikMix2,
+            start=start, method="bfgs",
+            constraints=list(ineqA=A2, ineqB=B),
+            print.level=1, rho=0.5)
+     )
Error in maxOptim(fn = fn, grad = grad, hess = hess, start = start, method = "BFGS",  : 
  Inequality constraint A must be a matrix
Current dimension
>                            # should explain that matrix needed
> A2 <- matrix(c(-1, 0, 0, 1), 1, 4)
> try(maxLik(logLikMix2, gradLikMix2,
+            start=start, method="bfgs",
+            constraints=list(ineqA=A2, ineqB=B),
+            print.level=1, rho=0.5)
+     )
Error in maxOptim(fn = fn, grad = grad, hess = hess, start = start, method = "BFGS",  : 
  Inequality constraint A must have the same number of columns as length of the parameter.
Currently 4 and 2.
>                            # should explain that wrong matrix
>                            # dimension
> B2 <- 1:3
> try(maxLik(logLikMix2, gradLikMix2,
+            start=start, method="bfgs",
+            constraints=list(ineqA=A, ineqB=B2),
+            print.level=1, rho=0.5)
+     )
Error in maxOptim(fn = fn, grad = grad, hess = hess, start = start, method = "BFGS",  : 
  Inequality constraints A and B suggest different number of constraints: 2 and 3
>                            # A & B do not match
> cat("A & B do not match\n")
A & B do not match
> B2 <- matrix(1,2,2)
> try(maxLik(logLikMix2, gradLikMix2,
+            start=start, method="bfgs",
+            constraints=list(ineqA=A, ineqB=B2),
+            print.level=1, rho=0.5)
+     )
Error in maxOptim(fn = fn, grad = grad, hess = hess, start = start, method = "BFGS",  : 
  Inequality constraint B must be a vector (or Nx1 matrix).  Currently 2 columns
>                            # B must be a vector
> 
> ## ----  fixed parameters with constrained optimization -----
> ## Thanks to Bob Loos for finding this error.
> ## Optimize 3D hat with one parameter fixed (== 2D hat).
> ## Add an equality constraint on that
> cat("Constraints + fixed parameters\n")
Constraints + fixed parameters
> hat3 <- function(param) {
+    ## Hat function.  Hessian negative definite if sqrt(x^2 + y^2) < 0.5
+    x <- param[1]
+    y <- param[2]
+    z <- param[3]
+    exp(-x^2-y^2-z^2)
+ }
> sv <- c(1,1,1)
> ## constraints: x + y + z >= 2.5
> A <- matrix(c(x=1,y=1,z=1), 1, 3)
> B <- -2.5
> constraints <- list(ineqA=A, ineqB=B)
> res <- maxBFGS(hat3, start=sv, constraints=constraints, fixed=3,
+                iterlim=3)
> print(summary(res))
--------------------------------------------
BFGS maximization 
Number of iterations: 3 
Return code: 1 
iteration limit exceeded  
Function value: 0.1125 
Estimates:
     estimate gradient
[1,]   0.7696  -0.1732
[2,]   0.7696  -0.1732
[3,]   1.0000  -0.2251

Constrained optimization based on constrOptim 
1  outer iterations, barrier value -0.0004159 
--------------------------------------------
> 
> proc.time()
   user  system elapsed 
  2.872   0.046   2.915 
